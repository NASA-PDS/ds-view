<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2010-2012, by the California Institute of Technology.
  ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged.
  Any commercial use must be negotiated with the Office of Technology Transfer
  at the California Institute of Technology.

  This software is subject to U. S. export control laws and regulations
  (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the extent that the software
  is subject to U.S. export control laws and regulations, the recipient has
  the responsibility to obtain export licenses or other export authority as
  may be required before exporting such information to foreign countries or
  providing access to foreign nationals.

  $Id$
-->

<document>
  <properties>
    <title>Operation</title>
    <author email="Jordan.H.Padams@jpl.nasa.gov">Jordan Padams</author>
    <author email="Sean.Hardman@jpl.nasa.gov">Sean Hardman</author>
  </properties>

  <body>
    <section name="Operation">
      <p>This document describes how to operate the Search Core software for a generic environment, 
      see the <a href="./en-operate.html">Engineering Node Operation Procedures</a> for more detailed operation instruction for the 
      <a href="../install/en-install.html">Engineering Node installation</a>. The following topics can be found in this document:
      </p>

      <ul>
        <li><a href="#Tool_Execution">Tool Execution</a></li>
		<li><a href="#Solr_Ingestion">Solr Ingestion</a></li>
		<li><a href="#Basic_Index_Generation">How To Easily Populate Search Service With Data</a></li>
        <li><a href="#Common_Errors">Common Errors</a></li>
      </ul>

      <p>Note: The command-line examples in this section have been broken into multiple lines for readability. 
      The commands should be reassembled into a single line prior to execution.
      </p>
    </section>

    <section name="Tool Execution">
      <p>Search Core can be executed in various ways. This section describes how to run the tool, as well as its behaviors and caveats.
      </p>

      <subsection name="Command-Line Options">
        <p>The following table describes the command-line options available:
        </p>

        <table>
          <tr><th>Command-Line Option</th><th>Description</th></tr>
<tr><td>-a,--all</td><td>Run all components of the Search Core [default]</td></tr>
<tr><td>-c,--config-home &lt;directories&gt;</td><td>Specify the product class configuration home directory.  Must contain product-classes.txt. Multiple directories can be specified to accompany multiple registries. (Default: $SEARCH_CORE_HOME/conf/pds/)</td></tr>
<tr><td>-C,--clean-dirs</td><td>Turn off removal of all directories from previous Search Core execution output. These directories will still be backed up in the Search Home directory. (Default: True)</td></tr>
<tr><td>-d,--debug</td><td>Turn on debugger.</td></tr>
<tr><td>-e,--extractor</td><td>Execute component to extract data from registry</td></tr>
<tr><td>-H,--search-home &lt;directory&gt;</td><td>Specify the Search Home directory. The tool will output the index files to this directory. When using the Search Service, this should be the $SEARCH_SERVICE_HOME/pds directory (Default: $SEARCH_SERVICE_HOME/pds directory)</td></tr>
<tr><td>-h,--help</td><td>Display usage.</td></tr>
<tr><td>-i,--solr-indexer</td><td>Execute component to generate a Solr Index</td></tr>
<tr><td>-m,--query-max &lt;integer&gt;</td><td>Specify the maximum number of registry values to be returned from query. (Default: 999999999)</td></tr>
<tr><td>-p,--properties-file &lt;files&gt;</td><td>Specify properties file containing Search Home, Registry URL, and product class configuration home directory. Multiple files can be specified.</td></tr>
<tr><td>-r,--registry &lt;urls&gt;</td><td>Specify Registry Service instance to query. Multiple registries can be specified.</td></tr>
<tr><td>-V,--version</td><td>Display application version.</td></tr>
        </table>
      </subsection>

      <subsection name="Execute Search Core Tool">
        <p>This section demonstrates execution of the tool using the command-line options. The examples below execute the tool via the batch/shell script.
        </p>

        <p>The Search Core requires, at minimum, a SEARCH_HOME directory and REGISTRY_URL be specified via the command-line.  The following is the format for the command:
        </p>

        <source>
% search-core -H &lt;SEARCH_HOME&gt; -r &lt;REGISTRY_URL&gt; [options]
        </source>

	<p>Since we are running the Search Core with the Search Service, SEARCH_HOME = $SEARCH_SERVICE_HOME/pds.  The 'pds' appended to the SEARCH_SERVICE_HOME represents the specific core of Solr we want to apply this index.  The following demonstrates how to run the Search Core with a SEARCH_SERVICE_HOME=/usr/local/search-service and REGISTRY_URL=http://localhost:8080/registry:
	</p>

        <source>
% search-core -H /usr/local/search-service/pds -r http://localhost:8080/registry
        </source>

	<p>By default, the command above runs all components of the Search Core software and produces a Solr index from the Registry Service data.  The solr_index.xml file(s) will appear in the $SEARCH_SERVICE_HOME/pds/index directory.  To run each component separately, they must be completed in the following order:</p>

	<ol>
	  <li>
	    <p>The following command will run the Search Core with a SEARCH_SERVICE_HOME=/usr/local/search-service and only run the Registry Extractor component to generate XML index documents for each Registry context product type in the directory /usr/local/search-service/pds/registry-data/&lt;object-type&gt;/:</p>
	    <source>
% search-core -e -H /usr/local/search-service/pds -r http://localhost:8080/registry
	    </source>
	  </li>
	  <li>
	    <p>The following command will run the Search Core with a SEARCH_SERVICE_HOME=/usr/local/search-service and only run the Solr Indexer component, which parses the XML documents produced by the Registry Extractor, and generates Solr indexes located in /usr/local/search-service/pds/index :</p>
	    <source>
% search-core -i -H /usr/local/search-service/pds -r http://localhost:8080/registry
	    </source>
	  </li>
	</ol>

        <p>The following command demonstrates how to test the Search Core with a SEARCH_SERVICE_HOME=/usr/local/search-service and only query 100 products for indexing (useful for testing purposes):
        </p>

        <source>
% search-core -H /usr/local/search-service/pds -r http://localhost:8080/registry -m 100
        </source>

        <p>The following command demonstrates how to specify a SEARCH_HOME and REGISTRY_URL via a Search Core properties file:
        </p>

        <source>
% search-core -p /usr/local/search-core/conf/pds/pds3/core.properties
        </source>

	<p>An example Search Core properties file looks like this:</p>

	<source>
search.core.search-home = /usr/local/search-service/pds
search.core.registry-url = http://localhost:8080/registry
search.core.config-home = /usr/local/search-core/conf/pds/pds3
	 </source>

	<p>The following command demonstrates how to specify multiple registries:
        </p>

	<source>
% search-core -H /usr/local/search-service/pds -r http://localhost:8080/registry http://localhost:8080/registry-psa
	</source>

	<p>The following command demonstrates how to specify multiple Search Core property files:
        </p>

	<source>
% search-core -p /usr/local/search-core/conf/pds/pds3/core.properties /usr/local/search-core/conf/psa/pds3/core.properties
	</source>
      </subsection>
    </section>
    <section name="Solr Ingestion">

      <p>
	Once the Lucene index has been created using the Search Core command-line tool, we want to ingest the data into the Apache Solr web application so it can be searched.  To do so we use the <i>solr-post</i> shell script using curl and HTTP POST to ingest the data in Solr.  First, in order to run this script, you must go to the $SEARCH_CORE_HOME/bin directory:
      </p>
      
      <p><i>Make sure SEARCH_CORE_HOME is in the PATH prior to completing the following procedure</i></p>

      <p>The following command demonstrates how to run the script:
      </p>

      <source>
% solr-post &lt;SEARCH_HOME&gt; &lt;SEARCH_SERVICE_URL&gt;
      </source>

      <p>
	For example:
      </p>

      <source>
% $SEARCH_CORE_HOME/solr-post /usr/local/search-service/pds http://localhost:8080/search-service/pds
      </source>
    </section>
    <section name="Basic Index Generation">
      <p>The <i>initial-index</i> shell script is included in the package in an effort to streamline the process by running the Search Core software to produce the index, and the solr-post script to post the data to the Solr application.  Go to the $SEARCH_CORE_HOME/bin directory to update the environment variables ($SEARCH_CORE_HOME/bin/env-vars) and run the script:
      </p>

      <p><b>Assumptions.</b>  The <i>initial-index</i> script is intended only for those installations that use only 1 registry and the default extractor configuration found in $SEARCH_CORE_HOME/conf/pds/pds3/product-classes.txt.
      </p>
      
      <subsection name="Using Environment Variables">
	<ul>
	  <li>Update <i>$SEARCH_CORE_HOME/bin/env-vars</i> with, <b>at minimum</b>, the following information:
	    <ul>
	      <li>SEARCH_HOME - The path for the home directory of local instance of search service.</li>
	      <li>SEARCH_SERVICE_URL - URL of the Search Service instance.</li>
	      <li>REGISTRY_URL - URL of the Registry Service instance.</li>
	    </ul>
	  </li>
	  <li>Run the initial-index script:
	    <source>
% $SEARCH_CORE_HOME/initial-index
	    </source>
	  </li>
	</ul>
      </subsection>

      <subsection name="Using Command-Line Arguments">
	<p>The initial-index script can also be run using command-line arguments in lieu of updating <i>env-var</i>:</p>
	<source>
% $SEARCH_CORE_HOME/initial-index &lt;SEARCH_HOME&gt; &lt;SEARCH_SERVICE_URL&gt; &lt;REGISTRY_URL&gt;
	</source>

	<p>For example:</p>

	<source>
% $SEARCH_CORE_HOME/initial-index /usr/local/search-service/pds http://localhost:8080/search-service/pds http://localhost:8080/registry
	</source>
      </subsection>

      <subsection name="Test Search Service">
      <p>Once this script completes, the data should be available through the Search Service interface. Go to <a href="http://localhost:8080/search-service/pds/search/?q=*:*">http://localhost:8080/search-service/pds/search/?q=*:*</a> to verify data is available (modify domain and port as needed).  See the <a href="../../search-service/operate">Search Service - Operate</a> page for more information on how to query data.</p>
      </subsection>

      <p><i>Note: To further streamline the process, the command-line arguments can be removed from the initial-index script, and the search-core line can modified according to your specific needs.</i>
      </p>
    </section>
    
    <section name="Post To Operations">
      <p>Some installations require building an index to be replicated between multiple secured machines.  Secured machines, meaning POSTing data remotely is forbidden.  Instead of generating a new index on each machine, the <i>$SEARCH_CORE_HOME/bin/ops-index</i> script was developed to <a href="http://rsync.samba.org/">rsync</a> a previously generated index from a remote machine and POST the data to a local Search Service installation.  The following describes the how to use the script:</p>

      <subsection name="Using Environment Variables">
	<ul>
	  <li>Update <i>$SEARCH_CORE_HOME/bin/env-vars</i> with, <b>at minimum</b>, the following information:
	    <ul>
	      <li>SEARCH_HOME - The path for the home directory of local instance of search service.</li>
	      <li>SEARCH_SERVICE_URL - URL of the Search Service instance.</li>
	      <li>SOURCE - Source machine name where initial index was generated</li>
	      <li>SOURCE_USER - Username to connect source machine</li>
	      <li>SOURCE_PATH - Optional variable. Path on source machine to directory containing solr_index.xml.* .  Defaults to SEARCH_HOME/index</li>
	    </ul>
	  </li>
	  <li>Run the <i>ops-index</i> script:
	    <source>
% $SEARCH_CORE_HOME/ops-index
	    </source>
	  </li>
	</ul>
      </subsection>

      <subsection name="Using Command-Line Arguments">
	<p>The ops-index script can also be run using command-line arguments in lieu of updating <i>env-vars</i>:</p>
	<source>
% $SEARCH_CORE_HOME/ops-index &lt;SEARCH_HOME&gt; &lt;SEARCH_SERVICE_URL&gt; &lt;SOURCE&gt; &lt;SOURCE_USER&gt; [&lt;SOURCE_PATH&gt;]
	</source>

	<p>For example:</p>

	<source>
% ./ops-index /usr/local/search-service/pds http://localhost:8080/search-service/pds pdsbeta.jpl.nasa.gov root
	</source>
      </subsection>

      <subsection name="Test Search Service">
      <p>Once this script completes, the data should be available through the Search Service interface. Go to <a href="http://localhost:8080/search-service/pds/search/?q=*:*">http://localhost:8080/search-service/pds/search/?q=*:*</a> to verify data is available (modify domain and port as needed).  See the <a href="../../search-service/operate">Search Service - Operate</a> page for more information on how to query data.</p>
      </subsection>
    </section>

    <section name="Common Errors">
      <subsection name="Error running Registry Extractor">
	<p>This error arises when there is an error connecting with the Registry.  The following are potential mitigation strategies:</p>
	<ul>
	  <li>Verify the Registry URL specified is correct and accessible.</li>
	  <li>Verify the Registry is populated with data by going to $REGISTRY_URL/report.  See <a href="../../../registry">Registry Documentation</a> for more information.</li>
	</ul>
      </subsection>
      <subsection name="501 Method Not Implemented">
	<p>This error occurs when using <i>solr-post</i> script and the HTTP POST method to ingest data into Solr.  This usually means that the Search Service URL specified is either incorrect or attempting to access a port that is not open to the HTTP POST method.  The following are potential mitigation strategies:</p>
	<ul>
	  <li>Verify Search Service URL is correct by navigating to the page.  The Solr Welcome screen should appear.</li>
	  <li>Try changing the URL to access the localhost or an intranet-only accessible port (i.e. 8080).  Often servers do not allow the HTTP POST method through port 80 when accessing Tomcat.  For instance, if the Search Service URL used is http://my-host/search-service, try http://localhost:8080/search-service or http://my-host:8080/search-service (ports will differ according to Tomcat installation).</li>
	</ul>
      </subsection>
      <subsection name="search-core: command not found">
	<p>This error occurs when the system cannot find the <i>search-core</i> script in the PATH.  See <a href="../install">Installation Instructions</a> for more information on adding the <i>search-core</i> to the PATH.</p>
      </subsection>
    </section>
  </body>
</document>
