package gov.nasa.arc.pds.lace.server.parse;

import static org.testng.Assert.assertEquals;

import java.util.Collection;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class PatternSplitterTest {

	@Test(dataProvider="SplitTests")
	public void testSplit(String pattern, String[] splits) {
		Collection<String> actualSplits = PatternSplitter.splitPattern(pattern);

		assertEquals(actualSplits.size(), splits.length);
		int i=0;
		for (String split : actualSplits) {
			assertEquals(split, splits[i], "Split " + i + " does not match");
			++i;
		}
	}

	@DataProvider(name="SplitTests")
	private Object[][] getSplitTests() {
		return new Object[][] {
				// pattern, splits[]
				{ "", new String[] {""} },
				{ "abc", new String[] {"abc"} },
				{ "a|b", new String[] {"a", "b"} },
				{ "(a)|[b]", new String[] {"(a)", "[b]"} },
				{ "(a|b)", new String[] {"(a|b)"} },
				{ "a\\|b", new String[] {"a\\|b"} },
				{ "(a\\)|b)", new String[] {"(a\\)|b)"} },

				// ASCII_Date_YMD
				{
					"(-)?[0-9]{4}|(-)?[0-9]{4}-((0[1-9])|(1[0-2]))|(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))",
					new String[] {
							"(-)?[0-9]{4}",
							"(-)?[0-9]{4}-((0[1-9])|(1[0-2]))",
							"(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))"

					}
				},

				// ASCII_Date_Time_UTC
				{
					"(-)?[0-9]{4}(Z)"
					+ "|(-)?[0-9]{4}-((00[1-9])|(0[1-9][0-9])|([1-2][0-9][0-9])|(3(([0-5][0-9])|(6[0-6]))))(T)(([0-1][0-9])|(2[0-3])):[0-5][0-9](Z)"
					+ "|(-)?[0-9]{4}-((00[1-9])|(0[1-9][0-9])|([1-2][0-9][0-9])|(3(([0-5][0-9])|(6[0-6]))))(T)(([0-1][0-9])|(2[0-3])):[0-5][0-9]:(([0-5][0-9])|60)(\\.([0-9]{1,4}))?(Z)"
					+ "|(-)?[0-9]{4}-((00[1-9])|(0[1-9][0-9])|([1-2][0-9][0-9])|(3(([0-5][0-9])|(6[0-6]))))(T)(([0-1][0-9])|(2[0-4]))(Z)"
					+ "|(-)?[0-9]{4}-((00[1-9])|(0[1-9][0-9])|([1-2][0-9][0-9])|(3(([0-5][0-9])|(6[0-6]))))(T)24:00((:00((\\.0+)?))?)(Z)"
					+ "|(-)?[0-9]{4}-((00[1-9])|(0[1-9][0-9])|([1-2][0-9][0-9])|(3(([0-5][0-9])|(6[0-6]))))(Z)"
					+ "|(-)?[0-9]{4}-((0[1-9])|(1[0-2]))(Z)"
					+ "|(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))(T)(([0-1][0-9])|(2[0-3])):[0-5][0-9](Z)"
					+ "|(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))(T)(([0-1][0-9])|(2[0-3])):[0-5][0-9]:(([0-5][0-9])|60)(\\.([0-9]{1,4}))?(Z)"
					+ "|(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))(T)(([0-1][0-9])|(2[0-4]))(Z)"
					+ "|(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))(T)24:00((:00((\\.0+)?))?)(Z)"
					+ "|(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))(Z)",

					new String[] {
							"(-)?[0-9]{4}(Z)",
							"(-)?[0-9]{4}-((00[1-9])|(0[1-9][0-9])|([1-2][0-9][0-9])|(3(([0-5][0-9])|(6[0-6]))))(T)(([0-1][0-9])|(2[0-3])):[0-5][0-9](Z)",
							"(-)?[0-9]{4}-((00[1-9])|(0[1-9][0-9])|([1-2][0-9][0-9])|(3(([0-5][0-9])|(6[0-6]))))(T)(([0-1][0-9])|(2[0-3])):[0-5][0-9]:(([0-5][0-9])|60)(\\.([0-9]{1,4}))?(Z)",
							"(-)?[0-9]{4}-((00[1-9])|(0[1-9][0-9])|([1-2][0-9][0-9])|(3(([0-5][0-9])|(6[0-6]))))(T)(([0-1][0-9])|(2[0-4]))(Z)",
							"(-)?[0-9]{4}-((00[1-9])|(0[1-9][0-9])|([1-2][0-9][0-9])|(3(([0-5][0-9])|(6[0-6]))))(T)24:00((:00((\\.0+)?))?)(Z)",
							"(-)?[0-9]{4}-((00[1-9])|(0[1-9][0-9])|([1-2][0-9][0-9])|(3(([0-5][0-9])|(6[0-6]))))(Z)",
							"(-)?[0-9]{4}-((0[1-9])|(1[0-2]))(Z)",
							"(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))(T)(([0-1][0-9])|(2[0-3])):[0-5][0-9](Z)",
							"(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))(T)(([0-1][0-9])|(2[0-3])):[0-5][0-9]:(([0-5][0-9])|60)(\\.([0-9]{1,4}))?(Z)",
							"(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))(T)(([0-1][0-9])|(2[0-4]))(Z)",
							"(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))(T)24:00((:00((\\.0+)?))?)(Z)",
							"(-)?[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))(Z)",
					}
				}
		};
	}

}
