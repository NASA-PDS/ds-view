<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2010-2012, by the California Institute of Technology.
  ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged.
  Any commercial use must be negotiated with the Office of Technology Transfer
  at the California Institute of Technology.

  This software is subject to U. S. export control laws and regulations
  (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the extent that the software
  is subject to U.S. export control laws and regulations, the recipient has
  the responsibility to obtain export licenses or other export authority as
  may be required before exporting such information to foreign countries or
  providing access to foreign nationals.

  $Id$
-->

<document>
  <properties>
    <title>Operation</title>
    <author email="Michael.Cayanan@jpl.nasa.gov">Michael Cayanan</author>
    <author email="Sean.Hardman@jpl.nasa.gov">Sean Hardman</author>
  </properties>

  <body>
    <section name="Operation">
      <p>This document describes how to operate the Harvest Tool software. The following topics can be found in this document:
      </p>

      <ul>
        <li><a href="#Tool_Execution">Tool Execution</a></li>
        <li><a href="#Harvest_Policy_File">Harvest Policy File</a></li>
        <li><a href="#Report_Format">Report Format</a></li>
        <li><a href="#Common_Errors">Common Errors</a></li>
      </ul>

      <p>Note: The command-line examples in this section have been broken into multiple lines for readability. The commands should be reassembled into a single line prior to execution.
      </p>
    </section>

    <section name="Tool Execution">
      <p>Harvest Tool can be executed in various ways. This section describes how to run the tool, as well as its behaviors and caveats.
      </p>

      <subsection name="Command-Line Options">
        <p>The following table describes the command-line options available:
        </p>

        <table>
          <tr><th>Command-Line Option</th><th>Description</th></tr>
          <tr><td>-u, --username</td><td>Specify a username for authentication with the PDS Security Service.</td></tr>
          <tr><td>-p, --password</td><td>Specify a password associated with the username.</td></tr>
          <tr><td>-k, --keystore-pass</td><td>Specify a keystore password associated with the keystore file being passed into the tool.</td></tr>
          <tr><td>-l, --log-file</td><td>Specify a log file name. Default is standard out.</td></tr>
          <tr><td>-v, --verbose</td><td>Specify the message severity level and above to include in the log (0=Debug, 1=Info, 2=Warning, 3=Error). Default is Info and above (level 1).</td></tr>
          <tr><td>-e, --regexp</td><td>Specify file patterns to look for when registering products from a target directory. Each pattern must be surrounded by quotes (i.e. -e "*.xml").</td></tr>
          <tr><td>-D, --ignore-dir</td><td>Specify patterns to look for when traversing a target directory for sub-directories to ignore. Each pattern must be surrounded by quotes (i.e. -D "CATALOG").</td></tr>
          <tr><td>-pds3, --is-pds3-dir</td><td>Specify to indicate that the target directory is a PDS3 directory. Note that only one PDS3 target directory can be passed into the tool.</td></tr>
          <tr><td>-P, --port</td><td>Specify a port number to use if running the tool in persistence mode. See the <a href="#Persistence_Mode">Persistence Mode</a> section for more details.</td></tr>
          <tr><td>-w, --wait</td><td>Specify the time, in seconds, to wait in between the crawls if running the tool in persistence mode. See the <a href="#Persistence_Mode">Persistence Mode</a> section for more details.</td></tr>
          <tr><td>-V, --version</td><td>Display the release number and copyright information.</td></tr>
          <tr><td>-h, --help</td><td>Display <i>harvest</i> usage.</td></tr>
        </table>
      </subsection>

      <subsection name="Execute Harvest Tool">
        <p>The Harvest Tool operates with a policy file to register product metadata. Details on how to create this policy file can be found in the <a href="#Harvest_Policy_File">Harvest Policy File</a> section.
        </p>

        <p>This section demonstrates some of the ways that the tool can be executed:
        </p>

        <ul>
          <li>Registering Products From a Single Target</li>
          <li>Registering Products From Multiple Targets</li>
          <li>Registering Products From Targets Specified In The Policy File</li>
          <li>Registering Products To A Secured Registry Instance</li>
          <li>Excluding Sub-Directories To Traverse From a Target</li>
          <li>Registering PDS3 Products From a Single Target</li>
        </ul>

        <p><b><i>Registering Products From a Single Target</i></b></p>

        <p>The following command demonstrates how to register products to a non-secured registry instance from a target directory, <i>$HOME/directory</i>, where only files that end with a <i>.xml</i> file extension, will be processed:
        </p>

        <source>
% harvest $HOME/directory -e "*.xml" -c policy.xml
        </source>
        
        <p><b><i>Registering Products From Multiple Targets</i></b></p>

        <p>The following command demonstrates how to register products to a non-secured registry instance from two target directories, <i>$HOME/directory1</i> and <i>$HOME/directory2</i>, using the policy file, <i>policy.xml</i>. Only files that end with a <i>.xml</i> file extension will be processed. The output will go to a log file, <i>log-file.txt</i>:
        </p>

        <source>
% harvest $HOME/directory1, $HOME/directory2 -e "*.xml" -c policy.xml -l log-file.txt
        </source>

        <p><b><i>Registering Products From Targets Specified In The Policy File</i></b></p>

        <p>Targets can either be specified on the command-line or in in the policy file. Any targets specified on the command-line will overwrite any targets specified in the policy file. The following command demonstrates registering products based on targets specified in the policy file, <i>policy.xml</i>:
        </p>

        <source>
% harvest -c policy.xml
        </source>

        <p><b><i>Registering Products To A Secured Registry Instance</i></b></p>

        <p>The following command demonstrates how to register products to a secured registry instance from a target directory, <i>$HOME/directory</i>, using the policy file, <i>policy.xml</i>:
        </p>

        <source>
% harvest $HOME/directory -c policy.xml -u {username} -p {password} \
  -k {keystorePassword}
        </source>

        <p><b><i>Excluding Sub-Directories To Traverse From a Target</i></b></p>
        
        <p>The following command demonstrates registering products from a target directory, <i>$HOME/directory</i>, where the tool will not traverse the sub-directory <i>CONTEXT</i>:
        </p>
        
        <source>
% harvest $HOME/directory -c policy.xml -D "CONTEXT"
        </source>
        
        <p><b><i>Registering PDS3 Products From a Single Target</i></b></p>
        
        <p>The following command demonstrates registering PDS3 products to a non-secured registry instance from a target directory, <i>$HOME/pds3Directory</i>, where only files that end with a <i>.LBL</i> file extension, will be processed:
        </p>
        
        <source>
% harvest $HOME/pds3Directory -pds3 -e "*.LBL" -c policy.xml
        </source>

        <p>See the <a href="#PDS3_Product_Registration">PDS Product Registration</a> section for more details on how Harvest Tool supports PDS3 product registration.
        </p>
      </subsection>

      <subsection name="Persistence Mode">
        <p>The Harvest Tool can be run in persistence mode through an XML-RPC accessible web service called a daemon. Under this scenario, the Harvest Tool wakes up periodically, inspects a target directory or directories, and registers the latest products. This section details how to set this up.
        </p>

        <p>In order to run the tool through the daemon, the command-line option flags <i>-P</i> and <i>-w</i> need to be used. This tells the Harvest Tool the port number to use and how long to sleep in between crawls, respectively. When the daemon is running, it can be accessed through the following url: <i>http://localhost:{port number}/xmlrpc</i>. The following command demonstrates launching the Harvest Tool through the daemon on port <i>9001</i>, where it will wait 120 seconds in between crawls:
        </p>

        <source>
% harvest -c policy.xml -u {username} -p {password} \
  -k {keystorePassword} -l log.txt -P 9001 -w 120
        </source>

        <p>After running the above command, the daemon will be accessible at <i>http://localhost:9001/xmlrpc</i>.
        </p>

        <p>In order to stop the daemon from running, a daemon controller is needed. The <i>bin/</i> directory of the Harvest Tool release package contains a shell script, <i>harvest-ctrl</i>, and a batch file, <i>harvest-ctrl.bat</i>, which are used to gracefully shut down the daemon service on a UNIX-like and Windows system, respectively. In addition, they can provide a few additional statistics about the crawling.
        </p>

        <p>The following table describes the command-line options available for <i>harvest-ctrl</i>:
        </p>

        <table>
          <tr><th>Command-Line Option</th><th>Description</th></tr>
          <tr><td>--url</td><td>Specify the URL of the daemon service running the Harvest Tool.</td></tr>
          <tr><td>--operation</td><td>Specify a single operation to perform. List of valid operations can be found in the next table.</td></tr>
        </table>

        <p>The following table describes the operation names available to pass with the <i>--operation</i> command-line option:
        </p>

        <table>
          <tr><th>Operation Option</th><th>Description</th></tr>
          <tr><td>--stop</td><td>Specify this operation to shut down the daemon service.</td></tr>
          <tr><td>--isRunning</td><td>Gives an indication whether the daemon service is running.</td></tr>
          <tr><td>--getNumCrawls</td><td>Returns the number of crawls that have occurred.</td></tr>
          <tr><td>--getWaitInterval</td><td>Returns the time, in seconds, that the crawler has to wait in between crawls.</td></tr>
          <tr><td>--getMilisCrawling</td><td>Returns the amount of milliseconds spent crawling.</td></tr>
          <tr><td>--getAverageCrawlTime</td><td>Returns the average amount of time, in milliseconds, spent during each crawl.</td></tr>
        </table>

        <p>The following examples demonstrate how to run <i>harvest-ctrl</i> using a few of the different operations. For demonstration purposes, assume that the daemon service is located at the following url: <i>http://localhost:9001/xmlrpc</i>.
        </p>

        <p><b><i>Determine the Status of the Daemon Service</i></b></p>

        <p>The following command is used to find out if the daemon service is still running:
        </p>

        <source>
% harvest-ctrl --url http://localhost:9001/xmlrpc --operation --isRunning
        </source>

        <p><b><i>Shutdown the Daemon Service</i></b></p>

        <p>The following command demonstrates shutting down the daemon service:
        </p>

        <source>
% harvest-ctrl --url http://localhost:9001/xmlrpc --operation --stop
        </source>
      </subsection>
   </section>

   <section name="Harvest Policy File">
     <p>The Harvest policy file is an XML-based configuration file that the tool uses to find products and register their metadata. The schema for the policy file can be found in the <a href="index-policy-schema.html">Harvest Policy Schema</a> section. If viewing this document in PDF form, see the appendix for details. This section details how to setup the policy file to do PDS data product registration.
     </p>

     <subsection name="PDS4 Data Product Registration">
       <p>The following is an example of a policy file to perform registration of PDS4 data products:
       </p>

       <source>
&lt;policy&gt;
  &lt;registryPackage&gt;
    &lt;name&gt;Harvest Package Example&lt;/name&gt;
    &lt;description&gt;This is an example of a Harvest run.&lt;/description&gt;
  &lt;/registryPackage&gt;

  &lt;collections&gt;
    &lt;file&gt;$HOME/VG2PLS_archive/data/Collection_Data.xml&lt;/file&gt;
    &lt;file&gt;$HOME/VG2PLS_archive/document/Collection_document.xml&lt;/file&gt;
  &lt;/collections&gt;

  &lt;directories&gt;
    &lt;path&gt;$HOME/VG2PLS_archive&lt;/path&gt;
    &lt;fileFilter&gt;
      &lt;include&gt;*.xml&lt;/include&gt;
    &lt;/fileFilter&gt;
    &lt;directoryFilter&gt;
      &lt;exclude&gt;CONTEXT&lt;/exclude&gt;
    &lt;/directoryFilter&gt;    
  &lt;/directories&gt;

  &lt;accessUrls registerFileUrls="true"&gt;
    &lt;accessUrl&gt;
      &lt;baseUrl&gt;http://pds.nasa.gov/pds4&lt;/baseUrl&gt;
      &lt;offset&gt;$HOME&lt;/offset&gt;
    &lt;/accessUrl&gt;
  &lt;/accessUrls&gt;

  &lt;checksums generate="true"&gt;
    &lt;manifest&gt;$HOME/VG2PLS_archive/vg2pls_archive.md5&lt;/manifest&gt;
  &lt;/checksums&gt;

  &lt;storageIngestion&gt;
    &lt;serverUrl&gt;http://localhost:9000&lt;/serverUrl&gt;
  &lt;/storageIngestion&gt;

  &lt;candidates&gt;
    &lt;namespace prefix="dph" uri="http://pds.nasa.gov/schema/pds4/dph/v01"/&gt;

    &lt;productMetadata objectType="Product_Document"&gt;
      &lt;xPath slotName="information_model_version"&gt;
        //Identification_Area/information_model_version
      &lt;/xPath&gt;
      &lt;xPath slotName="product_class"&gt;
        //Identification_Area/product_class
      &lt;/xPath&gt;
      &lt;xPath slotName="alternate_id"&gt;
        //Identification_Area/Alias_List/Alias/alternate_id
      &lt;/xPath&gt;
      &lt;xPath slotName="alternate_title"&gt;
        //Identification_Area/Alias_List/Alias/alternate_title
      &lt;/xPath&gt;
      &lt;xPath slotName="citation_author_list"&gt;
        //Identification_Area/Citation_Information/author_list
      &lt;/xPath&gt;
      &lt;xPath slotName="citation_editor_list"&gt;
        //Identification_Area/Citation_Information/editor_list
      &lt;/xPath&gt;
      &lt;xPath slotName="citation_publication_year"&gt;
        //Identification_Area/Citation_Information/publication_year
      &lt;/xPath&gt;
      &lt;xPath slotName="citation_keywords"&gt;
        //Identification_Area/Citation_Information/keywords
      &lt;/xPath&gt;
      &lt;xPath slotName="citation_description"&gt;
        //Identification_Area/Citation_Information/description
      &lt;/xPath&gt;
      &lt;xPath slotName="modification_date"&gt;
        //Identification_Area/Modification_History/Modification_Detail/modification_date
      &lt;/xPath&gt;
      &lt;xPath slotName="modification_version_id"&gt;
        //Identification_Area/Modification_History/Modification_Detail/version_id
      &lt;/xPath&gt;
      &lt;xPath slotName="modification_description"&gt;
        //Identification_Area/Modification_History/Modification_Detail/description
      &lt;/xPath&gt;
      &lt;xPath slotName="external_reference_description"&gt;
        //Reference_List/External_Reference/description
      &lt;/xPath&gt;
      &lt;xPath slotName="document_revision_id"&gt;
        //Document_Description/revision_id
      &lt;/xPath&gt;
      &lt;xPath slotName="document_name"&gt;
        //Document_Description/document_name
      &lt;/xPath&gt;
      &lt;xPath slotName="document_doi"&gt;
        //Document_Description/doi
      &lt;/xPath&gt;
      &lt;xPath slotName="document_author_list"&gt;
        //Document_Description/author_list
      &lt;/xPath&gt;
      &lt;xPath slotName="document_editor_list"&gt;
        //Document_Description/editor_list
      &lt;/xPath&gt;
      &lt;xPath slotName="document_acknowledgement_text"&gt;
        //Document_Description/acknowledgement_text
      &lt;/xPath&gt;
      &lt;xPath slotName="document_copyright"&gt;
        //Document_Description/copyright
      &lt;/xPath&gt;
      &lt;xPath slotName="document_description"&gt;
        //Document_Description/description
      &lt;/xPath&gt;
      &lt;xPath slotName="document_publication_date"&gt;
        //Document_Description/publication_date
      &lt;/xPath&gt;
    &lt;/productMetadata&gt;

    &lt;productMetadata objectType="Product_Observational"&gt;
      &lt;xPath slotName="information_model_version"&gt;
        //Identification_Area/information_model_version
      &lt;/xPath&gt;
      &lt;xPath slotName="product_class"&gt;
        //Identification_Area/product_class
      &lt;/xPath&gt;
      &lt;xPath slotName="alternate_id"&gt;
        //Identification_Area/Alias_List/Alias/alternate_id
      &lt;/xPath&gt;
      &lt;xPath slotName="alternate_title"&gt;
        //Identification_Area/Alias_List/Alias/alternate_title
      &lt;/xPath&gt;
      &lt;xPath slotName="citation_author_list"&gt;
        //Identification_Area/Citation_Information/author_list
      &lt;/xPath&gt;
      &lt;xPath slotName="citation_editor_list"&gt;
        //Identification_Area/Citation_Information/editor_list
      &lt;/xPath&gt;
      &lt;xPath slotName="citation_publication_year"&gt;
        //Identification_Area/Citation_Information/publication_year
      &lt;/xPath&gt;
      &lt;xPath slotName="citation_keywords"&gt;
        //Identification_Area/Citation_Information/keywords
      &lt;/xPath&gt;
      &lt;xPath slotName="citation_description"&gt;
        //Identification_Area/Citation_Information/description
      &lt;/xPath&gt;
      &lt;xPath slotName="modification_date"&gt;
        //Identification_Area/Modification_History/Modification_Detail/modification_date
      &lt;/xPath&gt;
      &lt;xPath slotName="modification_version_id"&gt;
        //Identification_Area/Modification_History/Modification_Detail/version_id
      &lt;/xPath&gt;
      &lt;xPath slotName="modification_description"&gt;
        //Identification_Area/Modification_History/Modification_Detail/description
      &lt;/xPath&gt;
      &lt;xPath slotName="observation_comment"&gt;
        //Observation_Area/comment
      &lt;/xPath&gt;
      &lt;xPath slotName="observation_start_date_time"&gt;
        //Observation_Area/Time_Coordinates/start_date_time
      &lt;/xPath&gt;
      &lt;xPath slotName="observation_stop_date_time"&gt;
        //Observation_Area/Time_Coordinates/stop_date_time
      &lt;/xPath&gt;
      &lt;xPath slotName="observation_local_mean_solar_time"&gt;
        //Observation_Area/Time_Coordinates/local_mean_solar_time
      &lt;/xPath&gt;
      &lt;xPath slotName="observation_local_true_solar_time"&gt;
        //Observation_Area/Time_Coordinates/local_true_solar_time
      &lt;/xPath&gt;
      &lt;xPath slotName="observation_solar_longitute"&gt;
        //Observation_Area/Time_Coordinates/solar_longitude
      &lt;/xPath&gt;
      &lt;xPath slotName="primary_result_type"&gt;
        //Observation_Area/Primary_Result_Description/type
      &lt;/xPath&gt;
      &lt;xPath slotName="primary_result_purpose"&gt;
        //Observation_Area/Primary_Result_Description/purpose
      &lt;/xPath&gt;
      &lt;xPath slotName="primary_result_data_regime"&gt;
        //Observation_Area/Primary_Result_Description/data_regime
      &lt;/xPath&gt;
      &lt;xPath slotName="primary_result_reduction_level"&gt;
        //Observation_Area/Primary_Result_Description/reduction_level
      &lt;/xPath&gt;
      &lt;xPath slotName="primary_result_description"&gt;
        //Observation_Area/Primary_Result_Description/description
      &lt;/xPath&gt;
      &lt;xPath slotName="investigation_name"&gt;
        //Observation_Area/Investigation_Area/name
      &lt;/xPath&gt;
      &lt;xPath slotName="investigation_type"&gt;
        //Observation_Area/Investigation_Area/type
      &lt;/xPath&gt;
      &lt;xPath slotName="observing_system_name"&gt;
        //Observation_Area/Observing_System/name
      &lt;/xPath&gt;
      &lt;xPath slotName="observing_system_description"&gt;
        //Observation_Area/Observing_System/description
      &lt;/xPath&gt;
      &lt;xPath slotName="observing_system_component_name"&gt;
        //Observation_Area/Observing_System/Observing_System_Component/name
      &lt;/xPath&gt;
      &lt;xPath slotName="observing_system_component_description"&gt;
        //Observation_Area/Observing_System/Observing_System_Component/description
      &lt;/xPath&gt;
      &lt;xPath slotName="observing_system_component_type"&gt;
        //Observation_Area/Observing_System/Observing_System_Component/observing_system_component_type
      &lt;/xPath&gt;
      &lt;xPath slotName="target_name"&gt;
        //Observation_Area/Target_Identification/name
      &lt;/xPath&gt;
      &lt;xPath slotName="target_alternate_designation"&gt;
        //Observation_Area/Target_Identification/alternate_designation
      &lt;/xPath&gt;
      &lt;xPath slotName="target_type"&gt;
        //Observation_Area/Target_Identification/type
      &lt;/xPath&gt;
      &lt;xPath slotName="target_description"&gt;
        //Observation_Area/Target_Identification/description
      &lt;/xPath&gt;
      &lt;xPath slotName="spacecraft_clock_start_count"&gt;
        //Observation_Area/Mission_Area/dph:spacecraft_clock_start_count
      &lt;/xPath&gt;
      &lt;xPath slotName="spacecraft_clock_stop_count"&gt;
        //Observation_Area/Mission_Area/dph:spacecraft_clock_stop_count
      &lt;/xPath&gt;
      &lt;xPath slotName="external_reference_description"&gt;
        //Reference_List/External_Reference/description
      &lt;/xPath&gt;
    &lt;/productMetadata&gt;

  &lt;/candidates&gt;
&lt;/policy&gt;
       </source>

       <p>The policy file is made up of the following complex type elements: <i>registryPackage</i>, <i>collections</i>, <i>directories</i>, <i>checksums</i>, <i>storageIngestion</i>, <i>accessUrls</i>, <i>candidates</i>, and <i>productMetadata</i>.
       </p>

       <p><b><i>registryPackage</i></b></p>

       <p>Each time the Harvest Tool runs, it creates a package in the registry to group the product registrations together. Specify this element to give a registry package a name and/or description. The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>name</td><td>Specify a package name. If this element is not specified, the default is to create a package with the name <i>Harvest-Package_&lt;current datetimestamp&gt;</i>.</td></tr>
         <tr><td>description</td><td>Specify a package description.If this element is not specified, the default is to create a description that lists the targets that were specified in the policy config file.</td></tr>
       </table>

       <p><b><i>collections</i></b></p>

       <p>Specify this element to tell the Harvest Tool to register the collections first before crawling a target directory. This is required if the target directory contains collections that are co-located with its members and in order to distinguish primary versus secondary members.
       </p>

       <p>The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>file</td><td>Specify a collection file. Specify this element tag more than once to point to multiple collection files.</td></tr>
       </table>

       <p>In the example above, the Harvest Tool will register the following collections before crawling the target directory:
       </p>

       <ul>
         <li>$HOME/VG2PLS_archive/data/Collection_Data.xml</li>
         <li>$HOME/VG2PLS_archive/document/Collection_document.xml</li>
       </ul>

       <p>Once these collections are registered, the primary and secondary members are cached in memory and as the Harvest Tool crawls through a target directory, any secondary members will be identified and will not be registered. In addition, a <i>SKIP</i> message will be issued in the log report to indicate that the tool has identified a non-primary member.
       </p>

       <p>In the case where the target directory consists of a hierarchy structure where the collection product is located one-level above its members, much like the PDS context bundle, then there is no need to specify the collections in the Harvest policy config file. Under this scenario, the collections will be registered first before the Harvest Tool traverses down the sub-directory containing the members.
       </p>

       <p><b><i>directories</i></b></p>

       <p>Specify this element to tell the Harvest Tool where to crawl for data products. The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>path</td><td>Specify a directory path to start crawling. Specify this element tag more than once to point to multiple directories to crawl.</td></tr>
         <tr><td>fileFilter</td><td>Specify patterns to look for when crawling a target directory for files to register. If omitted, the default is to get all files within a directory.</td></tr>
         <tr><td>directoryFilter</td><td>Specify patterns to look for when crawling a target directory for sub-directories to ignore.</td></tr>
       </table>

       <p>In the example above, the Harvest tool will crawl the directory location, <i>$HOME/VG2PLS_archive</i>, looking for files that have a <i>.xml</i> file extension. The default is to touch all files in the directory if the <i>filePattern</i> element is omitted from the policy file. In addition, the <i>CONTEXT</i> directory will be ignored while traversing the target directory.
       </p>

       <p><b><i>accessUrls</i></b></p>

       <p>Specify this element to provide links to the physical data products. The links will be placed in the registry as slots under the slot name <i>accessUrl</i>. An optional attribute can be specified named <i>registerFileUrls</i>, which if set to <i>true</i>, will create <i>file</i> url links.
       </p>

       <p>The <i>accessUrls</i> element can contain multiple <i>accessUrl</i> element tags. The following table describes the elements that are allowed within the <i>accessUrl</i> tag:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>baseUrl</td><td>Specify a base url.</td></tr>
         <tr><td>offset</td><td>Optionally specify an offset to nix from the absolute path of each product before appending it to the base url. Can be specified more than once.</td></tr>
       </table>

       <p>In the policy example above, the Harvest Tool will nix any absolute path of a product starting with <i>$HOME</i> before appending it to the starting base url of <i>http://pds.nasa.gov/pds4</i>. The following example demonstrates what the resulting access url will be for a registered product located at <i>$HOME/VG2PLS_archive/browse/Collection_Browse.xml</i>:
       </p>

       <source>
http://pds.nasa.gov/pds4/VG2PLS_archive/browse/Collection_Browse.xml
       </source>

       <p><b><i>checksums</i></b></p>

       <p>Checksum generation is turned off by default in the Harvest Tool. In order to turn this on, set the <i>generate</i> attribute to <i>true</i>. The following table describes the elements that are allowed within the <i>checksum</i> tag:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>manifest</td><td>Specify a checksum manifest file. Can be specified more than once.</td></tr>
       </table>

       <p>The following describes the tool behavior based on the different checksum settings:
       </p>

       <p><i>Checksum Manifest File Provided and Generate Flag Set To true</i></p>

       <p>Harvest will generate a checksum for each file encountered and verify it against the supplied checksum file. If the data file checksum was supplied in the label, Harvest will verify it as well. A warning message will be issued in the log report if a mismatch occurs. In any case, the generated checksum value is included in the associated Product_File_Repository product.
       </p>

       <p><i>Checksum Manifest File Provided and Generate Flag Set To False (or not set at all)</i></p>

       <p>Harvest will not generate checksums, but will use the value from the checksum manifest file to populate the associated Product_File_Repository product. If a data file checksum was supplied in the label, compare the value from the manifest against the value supplied in the label and issue a warning if there is a mismatch.
       </p>

       <p><i>Checksum Manifest File Not Provided and Generate Flag Set To True</i></p>

       <p>Harvest will generate a checksum for each file encountered and verify it against an optional checksum supplied in the label. If there is a mismatch, a warning message will be issued in the log report. The generated value is included in the associated Product_File_Repository product.
       </p>

       <p><i>Checksum Manifest File Not Provided and Generate Flag Set To False</i></p>

       <p>Harvest will not generate checksums. If the data file checksum was supplied in the label, populate the associated Product_File_Repository product with that value.
       </p>

       <p><b><i>storageIngestion</i></b></p>

       <p>Specify this element to tell the Harvest Tool to ingest data products to the PDS Storage Service. The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>serverUrl</td><td>Specify the url to the PDS Storage Service.</td></tr>
       </table>

       <p>In the example above, the Harvest Tool will ingest data products to the PDS Storage Service at <i>http://localhost:9000</i>. When a data product is ingested to the PDS Storage, it returns a product id which is a reference to the ingested product. This id is placed as a slot in the registry under the slot name <i>storageServiceProductId</i>.
       </p>

       <p><b><i>candidates</i></b></p>

       <p>Specify this element to tell the Harvest Tool what product types to register and what metadata to extract from a data product. This is a required element in the policy file. The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>namespace</td><td>Specify to allow the Harvest Tool to extract metadata that is in a namespace other than the default PDS namespace.</td></tr>
         <tr><td>productMetadata</td><td>Specify to tell the tool what object types and what metadata to register.</td></tr>
       </table>

       <p>By default, the Harvest Tool defines the default namespace to be the PDS namespace. To override this default, specify the <i>default</i> attribute in the namespace element and give it a value of <i>true</i>. The following sets the <i>dph</i> namespace to be the default namespace in Harvest:
       </p>

       <source>
&lt;candidates&gt;
  &lt;namespace prefix="dph" uri="http://pds.nasa.gov/schema/pds4/dph/v01" default="true"/&gt;
          ...
       </source>

       <p>Namespaces need to be defined in the Harvest policy file only if the metadata to be extracted exists in a namespace other than the PDS namespace. In the example above, a namespace with the prefix <i>dph</i> and uri <i>http://pds.nasa.gov/schema/pds4/dph/v01</i> has been defined. This means that any xPath expressions defined in the policy file will be able to use the <i>dph</i> prefix to be able to extract metadata that are within the dph namespace. xPaths will be explained in greater detail in the <i>productMetadata</i> section.
       </p>

       <p><b><i>productMetadata</i></b></p>

       <p>Specify this element to tell the Harvest Tool what metadata to register. It requires an attribute called <i>objectType</i> that tells the Harvest Tool what product types to register. The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>xPath</td><td>Specify an XPath expression to extract metadata.</td></tr>
       </table>

       <p>In the example above, the policy file tells the Harvest Tool to look for and register the <i>Product_Document</i> and <i>Product_Observational</i> object types.
       </p>

       <p>Also in the example is a set of <i>xPath</i> elements found under each <i>productMetadata</i> element. This defines what metadata to extract from the different products. XPath is a query language that uses path expressions to select nodes in an XML document. These path expressions look very much like expressions in a traditional computer file system. In its simplest form, prepending a <i>//</i> before a name will find the element no matter where it is in the XML file.
       </p>

       <p>The following XPath expression will find the <i>start_date_time</i> element within the default namespace, no matter where this element is located in the file:
       </p>

       <source>
//start_date_time
       </source>

       <p>The following XPath expression will find the <i>spacecraft_clock_start_count</i> element within the dph namespace, no matter where this element is located in the file:
       </p>

       <source>
//dph:spacecraft_clock_start_count
       </source>


       <p>The following XPath expression will find all <i>information_model_version</i> elements that are children of <i>Identification_Area</i> within the default namespace:
       </p>

       <source>
//Identification_Area/information_model_version
       </source>

       <p>The following XPath expression will find all <i>name</i> elements that are children of <i>Target_Identification</i> and that have a value of <i>MARS</i>:
       </p>

       <source>
//Target_Identification/name[text()="MARS"]
       </source>

       <p>For a more detailed explanation on XPath, go to your favorite search engine and type <i>XPath tutorial</i>.
       </p>

       <p>The <i>slotName</i> attribute within the <i>xPath</i> element allows the renaming of metadata element names when they are registered as slots in the registry. By default, the slot name is set to the element name that results from an xpath expression. For example, for the xpath expression, //Target_Identification/name, the slot name will be set to <i>name</i>.
       </p>

       <p>The following demonstrates setting the policy file to find any <i>name</i> elements that are children of <i>Target_Identification</i> and setting the slot name to <i>target_identification_name</i>:
       </p>

       <source>
&lt;xPath slotName="target_identification_name"&gt;//Target_Identification/name&lt;/xPath&gt;
       </source>
     </subsection>

    <subsection name="PDS3 Product Registration">
      <p>By default, the tool registers discovered PDS3 products under the <i>Product_Proxy_PDS3</i> objectType in the registry. Additionally, the tool has to dynamically create certain metadata in order to support ingestion of PDS3 data products into the registry. The following is an example of a policy file to perform product registration of PDS3 data products:
      </p>
      
      <source>
&lt;policy&gt;
  &lt;!-- Specify a single directory containing the PDS3 data products to register. --&gt;
  &lt;pds3Directory&gt;
    &lt;path&gt;/Users/mcayanan/pds3&lt;/path&gt;
    &lt;fileFilter&gt;
      &lt;include&gt;*.LBL&lt;/include&gt;
    &lt;/fileFilter&gt;
  &lt;/pds3Directory&gt;
  &lt;candidates&gt;
    &lt;!-- Harvest will register PDS3 data products under the objectType 'Product_Proxy_PDS3'. --&gt;
    &lt;pds3ProductMetadata&gt;
      &lt;!-- Tells Harvest what element values to use to create the LID. --&gt;
      &lt;lidContents prefix="urn:nasa:jpl"&gt;
        &lt;elementName&gt;DATA_SET_ID&lt;/elementName&gt;
        &lt;elementName&gt;INSTRUMENT_ID&lt;/elementName&gt;
        &lt;elementName&gt;PRODUCT_ID&lt;/elementName&gt;
      &lt;/lidContents&gt;
      &lt;titleContents&gt;
        &lt;elementName&gt;DATA_SET_ID&lt;/elementName&gt;
        &lt;elementName&gt;PRODUCT_ID&lt;/elementName&gt;
      &lt;/titleContents&gt;
      &lt;staticMetadata&gt;
        &lt;slot name="information_model_version"&gt;
          &lt;value&gt;0.8.0.0.k&lt;/value&gt;
        &lt;/slot&gt;
        &lt;slot name="target_ref"&gt;
          &lt;value&gt;urn:nasa:pds:target:MARS::1.0&lt;/value&gt;
        &lt;/slot&gt;
        &lt;slot name="mission_ref"&gt;
          &lt;value&gt;urn:nasa:pds:mission.MER&lt;/value&gt;
        &lt;/slot&gt;
      &lt;/staticMetadata&gt;
      &lt;!-- Register any additional metadata. Default is to
        register metadata defined in the identification area of the
        Product_Proxy_PDS3 schema. --&gt;
      &lt;ancillaryMetadata&gt;
        &lt;elementName slotName="start_time"&gt;
          START_TIME
        &lt;/elementName&gt;
        &lt;elementName slotName="stop_time"&gt;
          STOP_TIME
        &lt;/elementName&gt;
      &lt;/ancillaryMetadata&gt;
      &lt;includePaths&gt;
        &lt;path&gt;/data/pds3/label&lt;/path&gt;
      &lt;/includePaths&gt;
    &lt;/pds3ProductMetadata&gt;
  &lt;/candidates&gt;
&lt;/policy&gt;
      </source>

      <p>This policy file is made up of the following complex type elements: <i>pds3Directory</i>, <i>pds3ProductMetadata</i>, <i>lidContents</i>, <i>titleContents</i>, <i>staticMetadata</i>, <i>ancillaryMetadata</i>, and <i>includePaths</i>.
      </p>

      <p><b><i>pds3Directory</i></b></p>

      <p>Specify this element to tell the Harvest Tool the directory location to crawl. The following table describes the elements that are allowed:
      </p>

      <table>
        <tr><th>Element Name</th><th>Description</th></tr>
        <tr><td>path</td><td>Specify a directory location containing the PDS3 data products to register. Multiple tags can be specified to point to other directories to crawl.</td></tr>
        <tr><td>fileFilter</td><td>Specify patterns to look for when crawling a target directory for files to register. If omitted, the default is to get all files within a directory.</td></tr>
        <tr><td>directoryFilter</td><td>Specify patterns to look for when crawling a target directory for sub-directories to ignore.</td></tr>
      </table>

      <p>In the example above, the Harvest Tool will crawl for PDS3 data products starting at the location <i>/data/pds3/dataset</i>, looking for files with a <i>.LBL</i> file extension.
      </p>

      <p><b><i>pds3ProductMetadata</i></b></p>

      <p>Specify this element to tell the Harvest Tool what metadata to ingest into the registry when registering PDS3 data products. This element must be specified within the <i>candidates</i> tag as shown in the example. The following table describes the elements that are allowed:
      </p>

      <table>
        <tr><th>Element name</th><th>Description</th></tr>
        <tr><td>lidContents</td><td>Tells the Harvest Tool what fields to use to form the logical identifier.</td></tr>
        <tr><td>staticMetadata</td><td>Specify static metadata to add as slots for every discovered PDS3 data product.</td></tr>
        <tr><td>ancillaryMetadata</td><td>Specify ancillary metadata to add as slots for every discovered PDS3 data product.</td></tr>
      </table>

      <p><b><i>lidContents</i></b></p>

      <p>Specify this element to tell the Harvest Tool how to generate the logical identifier. The <i>prefix</i> attribute specifies what to prepend to the logical identifier. This is a required attribute. In the example above, the logical identifiers of every discovered PDS3 data product will be prefixed with <i>urn:nasa:pds</i>.
      </p>

      <p>There is an optional attribute that can be specified called <i>appendFilename</i>. When this attribute is specified and set to <i>true</i>, the Harvest Tool will append the product label filename (minus the extension) to the end of the logical identifier.
      </p>

      <p>The following table describes the elements that are allowed:
      </p>

      <table>
        <tr><th>Element name</th><th>Description</th></tr>
        <tr><td>elementName</td><td>Specify an element name whose value will be used in creating the logical identifier. Can be specified more than once.</td></tr>
      </table>

      <p>In the policy example above, the logical identifier will be formed using the following contents: prefix + <i>DATA_SET_ID</i> + ":" + <i>INSTRUMENT_ID</i> + ":" + <i>PRODUCT_ID</i>.
      </p>
      
      <p><b><i>titleContents</i></b></p>
      
      <p>Specify this element to tell the Harvest Tool how to generate the title of the registered PDS3 product.
      </p>
      
      <p>There is an optional attribute that can be specified called <i>appendFilename</i>. When this attribute is specified and set to <i>true</i>, the Harvest Tool will append the product label filename (minus the extension) to the end of the title.
      </p>
      
      <p>The following table describes the elements that are allowed:
      </p>
      
      <table>
        <tr><th>Element name</th><th>Description</th></tr>
        <tr><td>elementName</td><td>Specify an element name whose value will be used in creating the title of the registered product. Can be specified more than once.</td></tr>
      </table>
      
      <p>In the policy example above, the title contents will be formed using the following contents: <i>DATA_SET_ID</i> + " " + <i>PRODUCT_ID</i>.
      </p>      

      <p><b><i>staticMetadata</i></b></p>

      <p>Specify this element to tell the Harvest Tool to register a set of static metadata with the discovered PDS3 data products. The following table describes the elements that are allowed:
      </p>

      <table>
        <tr><th>Element name</th><th>Description</th></tr>
        <tr><td>slot</td><td>The slot element contains a <i>name</i> attribute to specify what slot name to use in the registry. The <i>value</i> tag specifies the slot value.</td></tr>
      </table>

      <p>In the policy example above, it specifies that for every PDS3 data product that is registered, the following metadata will be added as slots: <i>information_model_version</i>, <i>target_ref</i>, and <i>mission_ref</i>.
      </p>

      <p><b><i>ancillaryMetadata</i></b></p>

      <p>Specify this element to tell the Harvest tool what additional metadata to register. The following table describes the elements that are allowed:
      </p>

      <table>
        <tr><th>Element name</th><th>Description</th></tr>
        <tr><td>elementName</td><td>Specify an element name found in the PDS3 data product label. An optional <i>slotName</i> attribute can be used to set the slot name for this element. If <i>slotName</i> is not set, the tool will use the element name in lowercase form as the slot name.</td></tr>
      </table>

      <p>In the example above, the values from the following elements will be extracted from a PDS3 product label: <i>START_DATE_TIME</i> and <i>STOP_DATE_TIME</i>.
      </p>

      <p><b><i>includePaths</i></b></p>

      <p>Specify this element to tell the Harvest tool the locations of where to find file references specified in a label. By default, the tool will look for the file reference in the location of the label file. The following table describes the elements that are allowed:
      </p>

      <table>
        <tr><th>Element name</th><th>Description</th></tr>
        <tr><td>path</td><td>Specify the directory location of where to find the file references in a label. This element can be specified more than once to specify multiple search paths.</td></tr>
      </table>

      <p>In the example above, the tool will look at the <i>/data/pds3/label</i> directory for file references if they cannot be found in the same location as the label file.
      </p>

    </subsection>
  </section>

  <section name="Report Format">
    <p>This section describes the contents of the Harvest Tool report. At this time, the Harvest Tool only outputs a series of log messages. The log will report the success or failure of a discovered product attempting to be registered. Additionally, any syntactical errors in a discovered product are reported. A log consists of a severity level, file name, and a message. The following is an example of some of the log messages that can be expected from the Harvest Tool:
     </p>

     <source>
PDS Harvest Tool Log

Version                     Version 1.3.0-dev
Time                        Wed, Sep 19 2012 at 01:56:18 PM
Severity Level              INFO
Registry Location           http://localhost:8080/registry
Registry Package Name       Harvest Package Example
Registration Package GUID   urn:uuid:c1e92c9c-8eca-4742-b8d8-5a329aae89a5

INFO:   XML extractor set to the following default namespace: \
http://pds.nasa.gov/pds4/pds/v09
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/vg2pls_archive.md5] \
Processing checksum manifest.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Begin processing.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
line 69: Mapping reference type 'bundle_has_browse_collection' to 'collection_ref'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
line 74: Mapping reference type 'bundle_has_context_collection' to 'collection_ref'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
line 79: Mapping reference type 'bundle_has_data_collection' to 'collection_ref'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
line 84: Mapping reference type 'bundle_has_document_collection' to 'collection_ref'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
line 89: Mapping reference type 'bundle_has_schema_collection' to 'collection_ref'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Setting LID-based association, 'urn:nasa:pds:example.DPH.sampleArchive:browse', \
under slot name 'collection_ref'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Setting LID-based association, 'urn:nasa:pds:example.DPH.sampleArchive:context', \
under slot name 'collection_ref'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Setting LID-based association, 'urn:nasa:pds:example.DPH.sampleArchive:data', \
under slot name 'collection_ref'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Setting LID-based association, 'urn:nasa:pds:example.DPH.sampleArchive:document', \
under slot name 'collection_ref'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Setting LID-based association, 'urn:nasa:pds:example.DPH.sampleArchive:schema', \
under slot name 'collection_ref'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Created access url: http://pds.nasa.gov/pds4/VG2PLS_archive/Product_Bundle.xml
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Created access url: file:///Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml
SUCCESS:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Successfully registered product: urn:nasa:pds:example.DPH.sampleArchive::1.0
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Product has the following GUID: urn:uuid:75ab2390-208b-4bf6-a753-d40ae428f2ae
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Capturing file information for Product_Bundle.xml
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Generated checksum '8e82ad4c7c1b3d3f91744f038a0af0af' matches \
the supplied checksum '8e82ad4c7c1b3d3f91744f038a0af0af' in the manifest for file object \
'/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
No checksum to compare against in the product label for file object \
'/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Capturing file object metadata for README.TXT
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Generated checksum '5ef7af310b99d8189e670830c954a290' matches the \
supplied checksum '5ef7af310b99d8189e670830c954a290' in the manifest for file object \
'/Users/mcayanan/pds4/VG2PLS_archive/README.TXT'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Generated checksum '5ef7af310b99d8189e670830c954a290' matches the \
supplied checksum '5ef7af310b99d8189e670830c954a290' in the produt label for file object \
'/Users/mcayanan/pds4/VG2PLS_archive/README.TXT'.
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Created access url: http://pds.nasa.gov/pds4/VG2PLS_archive/Product_Bundle.xml
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Created access url: file:///Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml
SUCCESS:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Successfully registered product: urn:nasa:pds:example.DPH.sampleArchive:Product_Bundle.xml::1.0
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Product has the following GUID: urn:uuid:73cf357f-3ab9-4c0b-9824-23bbeca24b28
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Created access url: http://pds.nasa.gov/pds4/VG2PLS_archive/README.TXT
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Created access url: file:///Users/mcayanan/pds4/VG2PLS_archive/README.TXT
SUCCESS:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Successfully registered product: urn:nasa:pds:example.DPH.sampleArchive:README.TXT::1.0
INFO:   [/Users/mcayanan/pds4/VG2PLS_archive/Product_Bundle.xml] \
Product has the following GUID: urn:uuid:18bef1c9-2ed9-4879-88d9-01bf4c3fafe1

...

Summary:

17 of 17 file(s) processed, 3 other file(s) skipped
0 error(s), 11 warning(s)

17 of 17 products registered.
88 of 88 ancillary products registered.

Product Types Registered:
2 Product_Document
1 Product_Mission_PDS3
1 Product_Browse
1 Product_Observational
2 Product_File_Text
4 Product_XML_Schema
1 Product_Bundle
88 Product_File_Repository
5 Product_Collection

82 of 82 generated checksums matched their supplied value in the manifest, 6 value(s) not checked.

70 of 71 generated checksums matched the supplied value in their product label, 17 value(s) not checked.

102 of 102 associations registered.


End of Log
     </source>
    </section>

    <section name="Common Errors">
      <p>Execution of the Harvest Tool may result in the following message appearing in the log:
      </p>

      <source>
INFO:   XML extractor set to the following default namespace: \
http://pds.nasa.gov/schema/pds4/pds
INFO:   [/pds4/VG2PLS_archive/Product_Bundle.xml] Begin processing.
SKIP:   [/pds4/VG2PLS_archive/Product_Bundle.xml] No product_class element found.
      </source>

      <p>The message above is normally the result of a namespace mismatch between the Harvest Tool configuration and the product labels being registered. See the <a href="#PDS4_Data_Product_Registration">PDS4 Data Product Registration</a> section above for details on specifying the namespace in the configuration file. By the way, the message could be telling the truth where the product label does not contain the &lt;product_class&gt; element. If this is the case, then the file is not a valid PDS product label.
      </p>
    </section>
  </body>
</document>
