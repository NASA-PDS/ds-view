<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="ucd-tools">
	
	<property name="applet.codebase" value="pdstools.arc.nasa.gov pdstools-dev.ndc.nasa.gov localhost" />
	<property name="tsa.url" value="http://timestamp.digicert.com" />
	<property name="pdstools.keystore.default" location="${basedir}/.keystore" />
	<property name="pdstools.keystore.location" location="${pdstools.keystore.default}" />
	<property name="pdstools.keystore.password" value="changeit" />
	<property name="pdstools.key.alias" value="cs-ucd" />
	
	<property name="build.dir" value="${basedir}/build"/>
	<property name="source.dir" value="${basedir}/src" />
	
	<property name="test.output.dir" value="${build.dir}/test"/>
	<property name="test.dir" value="${basedir}/test" />
	<property name="test.library.dir" value="${test.dir}/lib" />
	<property name="junit.dir" value="${test.output.dir}/junit" />
	
	<property name="target.base" value="${build.dir}/artifacts" />
	<property name="webapp.base" value="${target.base}/ucd-tools" />
	<property name="target.dir" value="${target.base}/classes" />
	<property name="library.dir" value="target/dependency" />
	<property name="applet.library.dir" value="applet-lib" />
	<property name="pages.dir" value="${basedir}/WEB-INF/pages" />
	<property name="dist.dir" value="${basedir}/dist" />
	<property name="static.base" value="${basedir}/WebContent/web" />
	<property name="tomcat.dir" value="${basedir}/apache-tomcat-6.0.16/" />
	<property name="applet.dir" value="${basedir}/applet"/>
	<property name="build-task-lib.dir" value="${basedir}/build-task-lib"/>
	<property name="libcache.dir" value="${build.dir}/libcache" />
	<property name="libcache-filtered.dir" value="${build.dir}/libcacheFiltered" />
	
	<property name="js.dir" value="${static.base}/js" />
	<property name="js-temp.dir" value="${js.dir}/temp" />
	<property name="js-compressed.dir" value="${js.dir}/render" />
	
	<property name="css.dir" value="${static.base}/css" />
	<property name="css-temp.dir" value="${css.dir}/temp" />
	<property name="css-compressed.dir" value="${css.dir}/render" />
	
	<property name="buildversion.outputfile" value="${source.dir}/version.properties" />

	<property file="${source.dir}/config.properties" />

	<property file="src/version.properties"/>
	<property name="validator-applet-name" value="validator-${volumeValidator.version}.jar" />

	<!-- Defaults for database connection. May be overridded by config.properties. -->
	<property name="mysql.server" value="localhost" />
	<property name="mysql.port" value="3306" />
	<property name="mysql.db" value="pds_web" />

	<path id="build-task-lib.classpath">
		<pathelement location="${build-task-lib.dir}" />
    </path> 
	
	<path id="antlr.classpath">
		<pathelement location="grammar" />
		<pathelement location="${library.dir}/antlr-3.1.1.jar" />
	</path>
	
	<property environment="env" />
	
	<path id="libraries">
		<fileset dir="${library.dir}" includes="*.jar" />
		<fileset dir="${tomcat.dir}/lib" includes="*.jar" />
	</path>

	<path id="all.sources">
		<pathelement location="${source.dir}" />
		<pathelement location="${test.dir}" />
	</path>
		  
	<path id="mysql.classpath">
	    <pathelement location="${library.dir}/mysql-connector-java-5.1.7-bin.jar" />
	</path>
	
    <property name="mysql.driver" value="com.mysql.jdbc.Driver" />
    <property name="mysql.rootUrl" value="jdbc:mysql://${mysql.server}:${mysql.port}" />
    <property name="mysql.url" value="${mysql.rootUrl}/${mysql.db}" />

	<presetdef name="mct.sql">
        <sql driver="${mysql.driver}"
             url="${mysql.url}"
             userid="${mysql.user}"
             password="${mysql.pass}"
             classpathref="mysql.classpath"
             delimiter=";"
             expandproperties="false" />
    </presetdef>

	<target name="init-eclipse" depends="build-validation-applet">
		<echo>Generating configuration files...</echo>
		<copy file="src/struts.properties.in" 
			tofile="src/struts.properties" overwrite="true" />
		<copy file="src/config.properties.in" 
					tofile="src/config.properties" overwrite="false" />
	</target>
	
	<target name="test" description="Runs All JUnit Tests" depends="init">
		<echo>=== Running JUnit Tests ===</echo>

		<junit printsummary="withOutAndErr" fork="yes" haltonfailure="yes" haltonerror="yes" showoutput="yes">
			<classpath>
				<!-- add the packaged junit.jar to the classpath -->
				<pathelement path="${basedir}/lib/junit-4.4.jar" />
				<pathelement path="${build.dir}" />
			</classpath>

			<formatter type="plain" usefile="false" />

			<batchtest fork="no">
				<fileset dir="${test.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
  
    <target name="build-parser">
        <java classname="org.antlr.Tool" classpathref="antlr.classpath">
            <arg value="-o" />
            <arg file="${source.dir}/gov/nasa/pds/web/parser/label/antlr" />
            <arg file="grammar/ODL.g" />
        </java>
    </target>

	<target name="clean">
		<!-- delete last build if present -->
		<delete failonerror="false" dir="${build.dir}" />
	</target>

	<target name="init" unless="applet.up-to-date">
		<!-- make directories -->
		<mkdir dir="${build.dir}" />
		<mkdir dir="${target.base}" />
		<mkdir dir="${target.dir}" />
		<mkdir dir="${webapp.base}" />
		<mkdir dir="${dist.dir}" />

		<!-- get build version from svn and add to props -->
		
		<!-- compress js/css here or elsewhere -->
		
		<!-- build the classes -->
        <depend srcdir="${source.dir}" destDir="${target.dir}"
                cache="${build.dir}/depcache"/>
		<javac
				includeantruntime="false"
				encoding="UTF-8"
				destdir="${target.dir}"
				classpathref="libraries"
				debug="true"
				source="1.7"
				target="1.7">
			<src path="${source.dir}" />
			<classpath>
				<pathelement location="${build-task-lib.dir}/plugin.jar" />
			</classpath>
		</javac>

		<!-- copy the resource files from the src tree to the classes directory -->
		<copy todir="${target.dir}">
			<fileset dir="${source.dir}">
				<exclude name="**/*.java" />
				<exclude name="**/struts.properties.in" />
				<exclude name="**/struts.properties" />
				<exclude name="**/config.properties.in" />
				<exclude name="**/config.properties.dist" />
				<exclude name="**/.svn" />
			</fileset>
		</copy>
		
		<!-- copy struts.properties.in over -->
		<copy file="src/struts.properties.in" 
					tofile="${target.dir}/struts.properties" overwrite="false" />
	</target>
	
	<target name="compile-jsp">
		<property name="jsp.src" value="${target.dir}/jsp-src" />
		<mkdir dir="${jsp.src}" />
		<taskdef classname="org.apache.jasper.JspC" name="jasper">
			<classpath id="jspc.classpath">
				<pathelement location="${java.home}/../lib/tools.jar"/>
				<fileset dir="${tomcat.dir}/bin">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${tomcat.dir}/lib">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</taskdef>

		<jasper verbose="0" package="gov.nasa.pds.web.jsp" uriroot="." webXmlFragment="${jsp.src}/jsp-servlets.xml" outputDir="${jsp.src}" />

		<javac includeantruntime="false" srcdir="${jsp.src}" destdir="${target.dir}">
			<classpath>
				<path refid="jspc.classpath" />
				<path refid="libraries" />
			</classpath>
		</javac>

		<loadfile property="jsp.servlet.mappings" srcfile="${jsp.src}/jsp-servlets.xml" />

		<replace file="${webapp.base}/WEB-INF/web.xml" value="${jsp.servlet.mappings}"
	 	    summary="true" token="&lt;!-- precompiled jsp mappings --&gt;"/>
	</target>
	
	<!-- determine how we want to address config.properties moving to src before waring this up -->
	<target name="war" depends="init, build-validation-applet" description="Creates WAR file for deployment">
		
		<!-- copy config files and classes over -->
		<copy file="src/config.properties.dist" 
				tofile="${target.dir}/config.properties" overwrite="true" />
		<copy file="src/struts.properties.in" 
						tofile="${target.dir}/struts.properties" overwrite="true" />
		<copy todir="${webapp.base}/WEB-INF/classes">
			<fileset dir="${target.dir}" />
		</copy>
		
		<!-- copy resources -->
		<copy todir="${webapp.base}">
			<fileset dir="${basedir}/WebContent" includes="Home.action,Robots.txt,web/**/*,WEB-INF/masterdd.full,WEB-INF/web.xml,WEB-INF/tiles.xml,WEB-INF/widget.tld,WEB-INF/lib/*,WEB-INF/pages/**/*,WEB-INF/tiles/**/*,WEB-INF/dataSets" excludes="**/*.class" />
		</copy>
		
		<!-- create directories -->
		
		<!-- TODO: get version number from svn and push to a properties file -->
		
		<jar destfile="${dist.dir}/ucd-tools.war" basedir="${webapp.base}" />
	</target>
	
	<target name="genkey" unless="applet.up-to-date">
		<!-- delete last key to avoid "already exists" error -->
		<delete failonerror="false" file="${pdstools.keystore.default}" />
		
		<genkey alias="${pdstools.key.alias}" storepass="${pdstools.keystore.password}" validity="364" keystore="${pdstools.keystore.default}">
			<dname>
				<param name="CN" value="Planetary Data System" />
				<param name="OU" value="User Centered Technology Group" />
				<param name="O" value="nasa.gov" />
				<param name="C" value="US" />
			</dname>
		</genkey>
	</target>

	<target name="build-validation-applet-if-needed" depends="check-build-applet, build-validation-applet" />
	
	<target name="test-check-build-applet" depends="check-build-applet">
		<echo message="Target file: ${static.base}/applets/${validator-applet-name}" />
		<echo message="Applet up-to-date: ${applet.up-to-date}" />
	</target>
	
	<target name="check-build-applet">
		<uptodate property="applet.up-to-date" targetfile="${static.base}/applets/${validator-applet-name}">
			<srcfiles dir="${applet.library.dir}" includes="*.jar" />
			<srcfiles dir="${basedir}/apache-tomcat-6.0.16/lib" includes="servlet-api.jar" />
			<srcfiles dir="${basedir}/WebContent/WEB-INF" includes="masterdd.full" />
		</uptodate>
	</target>
	
	<target name="build-validation-applet" depends="init, genkey" unless="applet.up-to-date">
		<!-- make required directories -->
		<mkdir dir="${applet.dir}" />
		<mkdir dir="${libcache.dir}" />
		<mkdir dir="${libcache-filtered.dir}" />
		
		<!-- unjar libs that you're going to pull parts from -->
		<unjar src="${applet.library.dir}/commons-io-1.3.1.jar" dest="${libcache.dir}" />
		<unjar src="${applet.library.dir}/antlr-3.1.1.jar" dest="${libcache.dir}" />
		<unjar src="${applet.library.dir}/xwork-2.0.5.jar" dest="${libcache.dir}" />
		<unjar src="${applet.library.dir}/struts2-core-2.0.11.2.jar" dest="${libcache.dir}" />
		<unjar src="${applet.library.dir}/log4j-1.2.13.jar" dest="${libcache.dir}" />
		
		<!-- unjar libs you're going to copy wholesale -->
		<unjar src="${basedir}/apache-tomcat-6.0.16/lib/servlet-api.jar" dest="${libcache-filtered.dir}" />
		<unjar src="${applet.library.dir}/ognl-2.6.11.jar" dest="${libcache-filtered.dir}" />
		<unjar src="${applet.library.dir}/commons-logging-1.1.1.jar" dest="${libcache-filtered.dir}" />
		<unjar src="${applet.library.dir}/commons-logging-api-1.1.jar" dest="${libcache-filtered.dir}" />
		<unjar src="${applet.library.dir}/product-tools-3.1.0.jar" dest="${libcache-filtered.dir}" />
		<unjar src="${applet.library.dir}/pds-utils-1.0.1.jar" dest="${libcache-filtered.dir}" />
		<unjar src="${basedir}/lib/objectAccess-0.3.0.jar" dest="${libcache-filtered.dir}" />
		<unjar src="${basedir}/lib/jgoodies-common-1.8.0.jar" dest="${libcache-filtered.dir}" />
		<unjar src="${basedir}/lib/jgoodies-forms-1.8.0.jar" dest="${libcache-filtered.dir}" />
		
		<!-- take parts from unjarred libs -->
		<copy todir="${libcache-filtered.dir}/org/apache/log4j/">
			<fileset dir="${libcache.dir}/org/apache/log4j/">
				<exclude name="chainsaw/**" />
				<!--<exclude name="config/**" />-->
				<!--<exclude name="helpers/**" />-->
				<exclude name="jdbc/**" />
				<exclude name="jmx/**" />
				<exclude name="lf5/**" />
				<exclude name="net/**" />
				<exclude name="nt/**" />
				<!--<exclude name="or/**" />-->
				<!--<exclude name="spi/**" />-->
				<exclude name="varia/**" />
				<exclude name="xml/**" />
			</fileset>
		</copy>
		<copy todir="${libcache-filtered.dir}/org/antlr/runtime/">
			<fileset dir="${libcache.dir}/org/antlr/runtime/" />
		</copy>
		<copy todir="${libcache-filtered.dir}/com/opensymphony/xwork2/">
			<fileset dir="${libcache.dir}/com/opensymphony/xwork2/">
				<exclude name="config/**" />
				<exclude name="conversion/**" />
				<exclude name="inject/**" />
				<exclude name="interceptor/**" />
				<exclude name="mock/**" />
				<exclude name="spring/**" />
				<!--<exclude name="util/**" />-->
				<!--<exclude name="util/location/**" />-->
				<exclude name="util/profiling/**" />
				<exclude name="validator/**" />
			</fileset>
		</copy>
		<copy todir="${libcache-filtered.dir}/org/apache/struts2/">
			<fileset dir="${libcache.dir}/org/apache/struts2/">
				<exclude name="static/**" />
				<exclude name="components/**" />
				<exclude name="config/**" />
				<!-- <exclude name="dispatcher/**" /> -->
				<exclude name="impl/**" />
				<exclude name="interceptor/**" />
				<exclude name="portlet/**" />
				<exclude name="servlet/**" />
				<exclude name="util/**" />
				<exclude name="validators/**" />
				<exclude name="views/**" />
			</fileset>
		</copy>
		<copy todir="${libcache-filtered.dir}/org/apache/commons/io/" file="${libcache.dir}/org/apache/commons/io/FileUtils.class" />
		<copy todir="${libcache-filtered.dir}/org/apache/commons/io/filefilter/" file="${libcache.dir}/org/apache/commons/io/filefilter/IOFileFilter.class" />
		<copy todir="${libcache-filtered.dir}/org/apache/commons/io/output/" file="${libcache.dir}/org/apache/commons/io/output/NullOutputStream.class" />
		
		<!-- build the classes -->
        <depend
        		srcdir="${source.dir}"
				destDir="${applet.dir}"
                cache="${build.dir}/depcache"
        		closure="true" />
		
		<javac
				includeantruntime="false"
				encoding="UTF-8"
				destdir="${applet.dir}"
				debug="true"
				source="1.7"
				target="1.7">
			
			<src path="${source.dir}" />
			
			<classpath>
				<pathelement location="${build-task-lib.dir}/plugin.jar" />
				<pathelement location="${libcache-filtered.dir}" />
			</classpath>
			
			<include name="gov/nasa/pds/web/applets/*"/>
			<!--
			<include name="gov/nasa/pds/web/parser/*"/>
			<include name="gov/nasa/pds/web/ui/containers/*"/>
			<include name="gov/nasa/pds/web/ui/constants/DataSetConstants.java"/>
			<include name="gov/nasa/pds/web/ui/utils/*"/>
			-->
		</javac>

		<!-- copy dictionary over -->
		<copy file="${basedir}/WebContent/WEB-INF/masterdd.full" tofile="${applet.dir}/masterdd.full"/>
		
		<jar destfile="${static.base}/applets/${validator-applet-name}">
			<fileset dir="${applet.dir}" />
			<fileset dir="${libcache-filtered.dir}" />
			<manifest>
				<attribute name="Permissions" value="all-permissions" />
				<attribute name="Codebase" value="${applet.codebase}" />
				<attribute name="Caller-Allowable-Codebase" value="${applet.codebase}" />
				<attribute name="Application-Library-Allowable-Codebase" value="${applet.codebase}" />
				<attribute name="Trusted-Library" value="true" />
				<attribute name="Application-Name" value="PDS Volume Validator" />
			</manifest>
		</jar>

		<signjar jar="${static.base}/applets/${validator-applet-name}"
			tsaurl="${tsa.url}"
			alias="${pdstools.key.alias}"
			storepass="${pdstools.keystore.password}"
			keystore="${pdstools.keystore.location}" />
		
		<!-- copy to dist directory -->
		<copy todir="${dist.dir}" file="${static.base}/applets/${validator-applet-name}" />
		
		<!-- delete build -->
		<delete failonerror="true" dir="${applet.dir}" />
		<delete failonerror="true" dir="${libcache.dir}" />
		<delete failonerror="true" dir="${libcache-filtered.dir}" />
	</target>

	<target name="compress-static" description="Compress static resources">
		<mkdir dir="${js-temp.dir}" />
		
		<concat destfile="${js-temp.dir}/full.js" fixlastline="no" binary="no">
			<filelist 
			    	id="defaultJSFiles" 
			   		dir="${js.dir}">
			    <file name="default.js"/>
				<!-- <file name="testjs.js"/> -->
			</filelist>
		</concat>

		<taskdef name="yuicompress" classname="com.yahoo.platform.yui.compressor.YUICompressTask">
			<classpath>
				<pathelement location="${build-task-lib.dir}/yuicompressor-2.4.1.jar" />
				<pathelement location="${build-task-lib.dir}/YUIAnt.jar" />
			</classpath>
		</taskdef>

		<yuicompress
				linebreak="1000"
				warn="true" 
				munge="no"
				preserveallsemicolons="true"
				outputfolder="${js-compressed.dir}">
			<fileset dir="${js-temp.dir}" >
				<include name="*.js" />
			</fileset>
		</yuicompress>
		
		<delete failonerror="true" dir="${js-temp.dir}" />
	</target>
	
	<target name="setBuildVersion" description="Sets the buildversion for the current build">
		<exec executable="svnversion" spawn="false" dir="${project.build.root}" output="${buildversion.outputfile}">
			<arg line="." />
		</exec>
		<replaceregexp file="${buildversion.outputfile}"
			match="([0-9]*)"
			replace="ASHGFH"
			byline="false" />
	</target>
	
	<target name="create-database" description="Creates and initializes the database.">
        <mct.sql url="${mysql.rootUrl}" expandproperties="true">
            drop database if exists ${mysql.db};
            create database ${mysql.db} character set ucs2;
		</mct.sql>
        <mct.sql src="${source.dir}/setup_db.sql" />
	</target>

</project>
