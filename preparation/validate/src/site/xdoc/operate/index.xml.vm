<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2010-2016, by the California Institute of Technology.
  ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged.
  Any commercial use must be negotiated with the Office of Technology Transfer
  at the California Institute of Technology.

  This software is subject to U. S. export control laws and regulations
  (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the extent that the software
  is subject to U.S. export control laws and regulations, the recipient has
  the responsibility to obtain export licenses or other export authority as
  may be required before exporting such information to foreign countries or
  providing access to foreign nationals.

  $Id$
-->

<document>
  <properties>
    <title>Operation</title>
    <author email="Michael.Cayanan@jpl.nasa.gov">Paul Ramirez</author>
    <author email="Sean.Hardman@jpl.nasa.gov">Sean Hardman</author>
  </properties>

  <body>
    <section name="Operation">
      <p>This document describes how to operate the Validate Tool. The following topics can be found in this document:
      </p>

      <ul>
        <li><a href="#Quick_Start">Quick Start</a></li>
        <li><a href="#Command-Line_Options">Command-Line Options</a></li>
        <li><a href="#Advanced_Usage">Advanced Usage</a></li>
        <li><a href="#Report_Format">Report Format</a></li>
        <li><a href="#Common_Errors">Common Errors</a></li>
      </ul>

      <p>Note: The command-line examples in this section have been broken into multiple lines for readability. The commands should be reassembled into a single line prior to execution.
      </p>
    </section>

    <section name="Quick Start">
      <p>This section is intended to give a quick and easy way to run the Validate Tool. For a more detailed explanation on other ways to run the tool, go to the <a href="#Advanced_Usage">Advanced Usage</a> section.
      </p>

      <p><b><i>Validating a Product</i></b></p>

      <p>The command below shows the recommended way to validate a single product:
      </p>

      <source>
 % validate product.xml -r validate-report.txt
      </source>

      <p>This validates the given product against the latest core schema and schematron packaged with the tool and writes the results to a file.
      </p>

      <p><b><i>Validating a Bundle</i></b></p>

      <p>The command below shows the recommended way to validate a bundle:
      </p>

      <source>
% validate $HOME/pds/bundle -M checksum-manifest.txt -r validate-report.txt -R pds4.bundle
      </source>

      <p>The <i>-R</i> flag indicates to the tool to apply additional validation rules to the target bundle. The <i>-i</i> flag indicates to the tool to perform referential integrity checking while the <i>-M</i> flag performs additional checksum validation. For more details on what is involved with referential integrity checking, go to the <a href="#Referential_Integrity_Checking">Referential Integrity Checking</a> section.
      </p>
    </section>

    <section name="Command-Line Options">
      <p>The following table describes the command-line options available:
      </p>

      <table>
        <tr><th>Command-Line Option</th><th>Description</th></tr>
        <tr><td nowrap="nowrap">-t, --target &lt;files,directories&gt;</td><td>Explicitly specify the targets (product files, directories) to validate. Targets can be specified implicitly as well (example: Validate product.xml). For more details on target specification, see the <a href="#Specifying_Targets">Specifying Targets</a> section.</td></tr>
        <tr><td>-R, --rule &lt;validation rule name&gt;</td><td>Specify the validation rules to apply. Valid values are "pds4.bundle", "pds4.collection", "pds4.folder", "pds4.label", or "pds3.volume". Default is to use "pds4.label" for target file inputs and to use "pds4.folder" for target directory inputs. See <a href="#Validation_Rules">Validation Rules</a> for more details.</td></tr>
        <tr><td>-M, --checksum-manifest &lt;file&gt;</td><td>Specify a Checksum Manifest file to perform additional checksum validation. For more details on checksum vaildation, see the <a href="#Checksum_Manifest_File_Validation">Checksum Manifest File Validation</a> section.</td></tr>
        <tr><td>-B, --base-path &lt;file&gt;</td><td>Specify a base path in order for the tool to properly resolve relative file references found in a checksum manifest file. For more details on checksum vaildation, see the <a href="#Checksum_Manifest_File_Validation">Checksum Manifest File Validation</a> section.</td></tr>
        <tr><td>-x, --schema &lt;schemas&gt;</td><td>Specify XML Schema files to use during validation. By using this flag, this will override using the PDS XML Schemas packaged with the tool. When passing in multiple schemas, specify the schema for the <i>pds</i> namespace (otherwise known as the core schema) first, followed by the other schemas. For more details on passing in multiple schemas, see the <a href="#Passing_in_Multiple_Schemas">Passing in Multiple Schemas</a> section.</td></tr>
        <tr><td>-S, --schematron &lt;schematrons&gt;</td><td>Specify Schematron files to use during validation. By using this flag, this will override using the PDS Schematron files packaged with the tool.</td></tr>
        <tr><td>-C, --catalog &lt;xml-catalogs&gt;</td><td>Specify XML Catalog files to use during validation.</td></tr>
        <tr><td>-r, --report-file &lt;file&gt;</td><td>Specify the report file name. Default is to output results to standard out.</td></tr>
        <tr><td>-s, --report-style &lt;json|xml&gt;</td><td>Specify the standard human-readable report format. Valid values are "full" for a full view, "xml" for an XML view, or "json" for a JSON view. Default is to generate a full report if this option is not specified. For more details on these report styles, see the <a href="#Report_Format">Report Format</a> section.</td></tr>
        <tr><td>-v, --verbose &lt;1|2|3&gt;</td><td>Specify the severity level and above to include in the human-readable report: (1=Info, 2=Warning, 3=Error). Default is Warning and above.</td></tr>
        <tr><td nowrap="nowrap">-e, --regexp &lt;file-patterns&gt;</td><td>Specify file patterns to look for when validating a target directory. Each pattern must be surrounded in quotes (example: "*.xml"). Pattern matching is case-insensitive in Windows, but case-sensitive for other systems. The default behavior is to search for files ending in "*.xml" or "*.XML". This flag option will override this default behavior.</td></tr>
        <tr><td>-m, --model-version &lt;model&gt;</td><td>Specify a model version to use during validation. The default is to use the latest PDS4 data model (<i>1600</i>). The other models supported in this release include: <i>1000</i>, <i>1100</i>, <i>1101</i>, <i>1200</i>, <i>1201</i>, <i>1300</i>, <i>1301</i>, <i>1400</i> and <i>1500</i>.</td></tr>
        <tr><td>-L, --local</td><td>Validate files only in the target directory instead of recursively traversing down the sub-directories.</td></tr>
        <tr><td>-f, --force</td><td>Force the tool to validate against the schemas and schematrons specified in a label.</td></tr>
        <tr><td>-c, --config</td><td>Specify a configuration file to set the tool behavior.</td></tr>
        <tr><td>-V, --version</td><td>Display the release number and copyright information.</td></tr>
        <tr><td>-h, --help</td><td>Display Harvest usage.</td></tr>
      </table>
    </section>

    <section name="Advanced Usage">
      <p>This section describes more advanced ways to run the tool, as well as its behaviors and caveats.
      </p>

      <subsection name="Tool Execution">
        <p>This section demonstrates some of the ways that the tool can be executed using the command-line option flags:
        </p>

        <ul>
          <li>Validating a Target Directory</li>
          <li>Validating Against User-Specified Schemas</li>
          <li>Validating Against User-Specified XML Catalogs</li>
          <li>Validating Against User-Specified Schematron Files</li>
          <li>Validating Against Label Specified Schemas and Schematrons</li>
          <li>Validating Against an Older Version of the PDS4 Data Model</li>
          <li>Ignoring Sub-Directories During Validation</li>
          <li>Changing Tool Behaviors With The Configuration File</li>
        </ul>

        <p><b><i>Validating a Target Directory</i></b></p>

        <p>The following command demonstrates the validation of a target directory against the core PDS schemas:
        </p>

        <source>
% validate /home/pds/collection
        </source>

        <p><b><i>Validating Against User-Specified Schemas</i></b></p>

        <p>Specifying XML Schemas on the command line will allow the Validate Tool to validate against the user-specified schemas instead of the schemas packaged with the tool. The following command demonstrates the validation of a single product label against a user-specified schema:
        </p>

        <source>
% validate product.xml -x product.xsd
        </source>

        <p>The following command demonstrates the validation of a set of target files against a set of user-specified schemas:
        </p>

        <source>
% validate producta.xml, productb.xml -x producta.xsd, productb.xsd
        </source>

        <p><b><i>Validating Against User-Specified XML Catalogs</i></b></p>

        <p>The following command demonstrates the validation of a single data product against a user-specified XML Catalog:
        </p>

        <source>
% validate product.xml -C catalog.xml
        </source>

        <p><b><i>Validating Against User-Specified Schematron Files</i></b></p>

        <p>Specifying Schematron files on the command-line will allow the Validate Tool to validate against the user-specified Schematron files instead of the Schematron files packaged with the tool. The following command demonstrates the vadation of a single data product against a user-specified Schematron:
        </p>

        <source>
% validate product.xml -S product.sch
        </source>

        <p><b><i>Validating Against Label Specified Schemas and Schematrons</i></b></p>

        <p>The following command demonstrates forcing the tool to validate against the schemas and schematrons specified in a given label.
        </p>

        <source>
% validate product.xml -f
        </source>
        
        <p>Note that validating with the force flag option versus passing in the label specified schemas using the <i>-x</i> flag may yield different validation results. This is due to how the underlying Xerces library treats these 2 scenarios. Basically, with the force flag behavior, namespaces are resolved by matching the element namespace in the label to one of the namespaces declared in the <i>schemaLocation</i> attribute of the label. When passing in schemas using the <i>-x</i> flag, those user given schemas override any schemas specified in the <i>schemaLocation</i> attribute of the label. They are read in and cached in memory prior to the validation step. Namespaces are then resolved by matching the element namespace to one defined in one of those schemas cached in memory.
        </p>

        <p><b><i>Validating Against an Older Version of the PDS4 Data Model</i></b></p>

        <p>The following command demonstrates the validation of a single data product label against version <i>1000</i> of the PDS4 data model:
        </p>

        <source>
% validate product.xml -m 1000
        </source>

        <p><b><i>Ignoring Sub-Directories During Validation</i></b></p>

        <p>By default, the Validate Tool will recursively traverse a target directory during validation. The <i>local</i> flag option is used to tell the Validate Tool to not perform recursion. The following command demonstrates the validation of a target directory without directory recursion:
        </p>

        <source>
% validate /home/pds/collection -L
        </source>

        <p><b><i>Changing Tool Behaviors With The Configuration File</i></b></p>

        <p>A configuration file can be passed into the command-line to change the default behaviors of the tool and to also provide users a way to perform validation with a single flag. For more details on how to setup the configuration file, see the <a href="#Using_a_Configuration_File">Using a Configuration File</a> section.
        </p>

        <p>The following command demonstrates performing validation using a configuration file:
        </p>

        <source>
% validate -c config.txt
        </source>
      </subsection>

      <subsection name="Specifying Targets">
        <p>Targets are validated in the order in which they are specified on the command-line. They can be specified implicitly and explicitly.
        </p>

        <p>To specify targets implicitly, it is best to specify them first on the command-line before any other command-line option flags. The following command demonstrates the validation of an implicitly defined, single target product label:
        </p>
        <source>
% validate product.xml
        </source>

        <p>The following command demonstrates the validation of implicitly defined, multiple targets:
        </p>
        <source>
% validate product.xml, /home/pds/collection
        </source>

        <p>Note: Implicit targets should not be specified after option flags that allow multiple arguments (see example below). Unexpected results can occur.
        </p>
        <source>
% validate -x product.xsd product.xml
        </source>

        <p>In this example, the Validate Tool will inadvertently treat the implicit target, <i>product.xml</i>, as a schema file.
        </p>

        <p>Targets can be specified both implicitly and explicitly at the same time. Targets specified implicitly are validated first, followed by those that are specified explicitly with the target flag.
        </p>

        <p>The following command demonstrates the validation of multiple product labels, specified both implicitly and explicitly:
        </p>

        <source>
% validate producta.xml, productb.xml -t productc.xml, /home/pds/collection
        </source>

        <p>In this example, <i>producta.xml</i> and <i>productb.xml</i> will get validated first, then <i>productc.xml</i> and the product labels in <i>/home/pds/collection</i> will get validated next.
        </p>

        <p>In each scenario above, the target product(s) were the equivalent of observational or document products. The data model also consists of bundle and collection products, which in turn reference other products. When the Validate Tool encounters one of these products, it traverses the inventory associated with that product and validates each product referenced as well as the target product.
        </p>
      </subsection>

      <subsection name="Validation Rules">
        <p>The Validate Tool provides the capability of doing various additional checks passed the usual PDS4 label validation. This is done through the <i>-R, --rule</i> flag option. The valid values are the following:
        </p>
        
        <ul>
          <li>pds4.label</li>
          <li>pds4.folder</li>
          <li>pds4.collection</li>
          <li>pds4.bundle</li>
          <li>pds3.volume</li>
        </ul>
        
        <p>If the <i>-R</i> flag is not specified on the command-line, the default behavior is to use the <i>pds4.label</i> rule for target file inputs and to use the <i>pds4.folder</i> rule for target directory inputs. This section details the checks that are made for each of the rule types. The command-line run examples below reference the example PDS4 Archive Bundle that can be found on the <a href="https://pds.jpl.nasa.gov/pds4/doc/examples/">PDS4 web site</a>.
        </p>
        
        <p><b><i>pds4.label</i></b></p>
        
        <p>The <i>pds4.label</i> validation rule will:
        </p>
        
        <ul>
          <li>Check that a product label conforms to a given schema and schematron.</li>
          <li>Check that files referenced in a product label exist.</li>
          <li>Check that the file references in a product label and the file on the file system match case.</li>
          <li>Check that file reference checksums in a product label matches their actual checksums, if present.</li>
          <li>Perform checksum validation against a Checksum Manifest file, if supplied.</li>
        </ul>
        
        <p>The following example demonstrates validating a product label using the default <i>pds4.label</i> validation rule:
        </p>
        
        <source> 
%> validate /home/pds/dph_example_archive_VG2PLS/data/ele_mom_tblChar.xml
        </source>
        
        <p><b><i>pds4.folder</i></b></p>
        
        <p>The <i>pds4.folder</i> validation rule allows the tool to do a file-by-file validation using the <i>pds4.label</i> rule on each file found in the target directory.
        </p>
        
        <p>The following example demonstrates performing a file-by-file validation on a target directory: 
        </p>
        
        <source>
%> validate /home/pds/dph_example_archive_VG2PLS        
        </source>
        
        <p><b><i>pds4.collection</i></b></p>
        
        <p>The <i>pds4.collection</i> validation rule applies the <i>pds4.label</i> validation rule on each product label found within a target collection. In addition, it will:
        </p>
        
        <ul>
          <li>Check that file names follow the file-naming rules as defined in section 6C.1.1 of the PDS4 Standards Reference.</li>
          <li>Check that file names do not match the prohibitied file names as defined in section 6C.1.2 of the PDS4 Standards Reference.</li>
          <li>Check that file names do not contain the prohibitied base names as defined in section 6C.1.4 of the PDS4 Standards Reference.</li>
          <li>Check that directory names follow directory-naming rules as defined in section 6C.2.1 of the PDS4 Standards Reference.</li>
          <li>Check that directory names do not match prohibited directory names as defined in section 6C.2.3 of the PDS4 Standards Reference.</li>
          <li>Check that all files in the target collection are referenced by some label.</li>
          <li>Perform referential integrity checking among the target collection and its members.</li>
        </ul>
        
        <p>The following example demonstrates applying a PDS4 Collection validation rule on a target collection:
        </p>
        
        <source>
%> validate /home/pds/dph_example_archive_VG2PLS/data -R pds4.collection
        </source>
        
        <p><b><i>pds4.bundle</i></b></p>
        
        <p>The <i>pds4.bundle</i> validation rule applies the <i>pds4.collection</i> validation rule on each collection found within a target collection. In addition, it will:
        </p>
        
        <ul>
          <li>Check that files and directories at the root of the target bundle are valid as defined in section 2B.2.2.1 of the PDS4 Standards Reference.</li>
          <li>Perform referential integrity checking among the target bundle and its members.</li>
        </ul>
        
        <p>The following example demonstrates running the tool using the PDS4 Bundle validation rules on a target bundle:
        </p>
        
        <source>
%> validate /home/pds/dph_example_archive_VG2PLS -R pds4.bundle
        </source>
        
        <p><b><i>pds3.volume</i></b></p>
        
        <p>The <i>pds3.volume</i> validation rule allows the Validate Tool to perform PDS3 volume validation on a target directory. Currently, only local targets are supported for this validation rule.
        </p>
        
        <p>The following example demonstrates running the tool against a PDS3 volume:
        </p>
        
        <source>
%> validate /home/pds/VG2-J-PLS-5-SUMM-ELE-MOM-96.0SEC-V1.0 -R pds3.volume
        </source>
        
      </subsection>

      <subsection name="Referential Integrity Checking">
        <p>The Validate Tool performs referential integrity checking within a given target directory when the <i>pds4.collection</i> or <i>pds4.bundle</i> validation rules are applied to a validation run (via the <i>-R, --rule</i> flag option). Assuming that the target directory points to a full PDS4 bundle, the following referential integrity checks are made as the tool validates each product:
        </p>

        <p>For Bundle products,
        </p>

        <ul>
          <li>Verify that each Collection member of a Bundle is present within the given target.</li>
          <li>Verify that each Collection member of a Bundle is referenced only once within the given target.</li>
        </ul>

        <p>For Collection products,
        </p>

        <ul>
          <li>Verify that each Collection product is referenced by a Bundle product within the given target.</li>
          <li>Verify that each Product member of a Collection is present within the given target.</li>
          <li>Verify that each Product member of a Collection is referenced only once within the given target.</li>
        </ul>

        <p>All other products are assumed to be members of a Collection. So for these, the tool will verify that each product is referenced by a Collection product within the given target.
        </p>

        <p>It is important to note that the tool only performs referential integrity checking on the targets that the tool is given. As an example, it is fine to specify a target directory that contains just a Collection product and its members:
        </p>

        <source>
% validate ${HOME}/bundle/collection -R pds4.collection
        </source>

        <p>In this case, the tool will not report that the given Collection is not referenced by a Bundle product.
        </p>

        <p>Another thing to note is that the report will record verified references under the <i>INFO</i> message severity level. So in order to see these messages, run the tool with the verbose level set to <i>1</i> to produce a report with the INFO messages. The following command demonstrates running the tool with the severity level set to <i>INFO</i> and above:
        </p>

        <source>
% validate ${HOME}/bundle1 -R pds4.bundle -v1
        </source>

        <p>Below is a snippet of an example report of a validation run with integrity checking turned on and the severity level set to <i>INFO</i> and above:
        </p>

        <source>
        ...

PASS: https://starbase.jpl.nasa.gov/pds4/1201/dph_example_archive_VG2PLS/browse/Collection_browse.xml
    INFO  The lidvid 'urn:nasa:pds:example.dph.sample_archive_bundle:browse::1.0' is a member of the following bundle: \
    https://starbase.jpl.nasa.gov/pds4/1201/dph_example_archive_VG2PLS/Product_Bundle.xml
    INFO  The member 'urn:nasa:pds:example.dph.sample_archive_bundle:browse:ele_mom::1.0' is referenced in the following product: \
    https://starbase.jpl.nasa.gov/pds4/1201/dph_example_archive_VG2PLS/browse/ele_mom_browse.xml

PASS: https://starbase.jpl.nasa.gov/pds4/1201/dph_example_archive_VG2PLS/browse/ele_mom_browse.xml
    INFO  The lidvid 'urn:nasa:pds:example.dph.sample_archive_bundle:browse:ele_mom::1.0' is a member of the following collection: \
    https://starbase.jpl.nasa.gov/pds4/1201/dph_example_archive_VG2PLS/browse/Collection_browse.xml

PASS: https://starbase.jpl.nasa.gov/pds4/1201/dph_example_archive_VG2PLS/context/Collection_context.xml
    INFO  The lidvid 'urn:nasa:pds:example.dph.sample_archive_bundle:context::1.0' is a member of the following bundle: \
    https://starbase.jpl.nasa.gov/pds4/1201/dph_example_archive_VG2PLS/Product_Bundle.xml
    INFO  The member 'urn:nasa:pds:context:instrument_host:instrument_host.vg2::1.0' is referenced in the following product: \
    https://starbase.jpl.nasa.gov/pds4/1201/dph_example_archive_VG2PLS/context/PDS4_host_VG2_1.0.xml
    INFO  The member 'urn:nasa:pds:context:instrument:instrument.pls__vg2::1.0' is referenced in the following product: \
    https://starbase.jpl.nasa.gov/pds4/1201/dph_example_archive_VG2PLS/context/PDS4_inst_PLS__VG2_1.0.xml
    INFO  The member 'urn:nasa:pds:context:investigation:mission.voyager::1.0' is referenced in the following product: \
    https://starbase.jpl.nasa.gov/pds4/1201/dph_example_archive_VG2PLS/context/PDS4_mission_VOYAGER_1.0.xml
    INFO  The member 'urn:nasa:pds:context:target:planet.jupiter::1.0' is referenced in the following product: \
    https://starbase.jpl.nasa.gov/pds4/1201/dph_example_archive_VG2PLS/context/PDS4_target_JUPITER_1.0.xml

        ...
        </source>

        <p>In the case that 2 targets are specified on the command line, the tool will treat each target as a separate entity when performing referential integrity checking. As an example, the following command demonstrates performing referential integrity on 2 different bundles:
        </p>

        <source>
% validate ${HOME}/bundle1, ${HOME}/bundle2 -e "*.xml" -R pds4.bundle
        </source>

        <p>The tool will perform referential integrity checking within the products located in the <i>${HOME}/bundle1</i> target, then will perform referential integrity checking within the products located in the <i>${HOME}/bundle2</i> target. In other words, the tool will not cross over to the <i>${HOME}/bundle2</i> directory to find LID/LIDVID references of a product in the <i>${HOME}/bundle1</i> directory.
        </p>
      </subsection>

      <subsection name="Checksum Manifest File Validation">
        <p>When a Checksum Manifest file is passed into the tool, the generated checksum value of a file is compared against the supplied value in the Manifest file.
        </p>
        
        <p>The dph example archive bundle, which can be downloaded from the <a href="https://pds.nasa.gov/pds4/doc/examples/">PDS web site</a>, contains an example of how a Checksum Manifest file could look like:
        </p>
        
        <source>
97a7569daeaacf57b5abceca57bdca43  .\Product_Bundle.xml
e7da7276dd553f30496b868a2007bf5b  .\README.TXT
84f68c7706f379c401e2f8e08a82edea  .\browse\Collection_browse.xml
bcb852a6a9292e304a93668e6cc2068c  .\browse\Collection_browse_inventory.tab
3ff61c98cbed11e99690f76b5f6831b0  .\browse\ELE_MOM.PDF
f2e5969b0f1a0f54e530e416b7f5d54a  .\browse\ele_mom_browse.xml
76d6463510bc48233d65b46d08087ef8  .\context\Collection_context.xml
b8f5301ad7c868c76f0e627f0da19aed  .\context\Collection_context_inventory.tab
c226a6a0867e003696a752b8c24e56f3  .\context\PDS4_host_VG2_1.0.xml
...
        </source>
        
        <p>It is importatnt to note that the tool supports either absolute or relative file references specified in a Checksum Manifest file. In the event that the file references are relative paths, the tool assumes that the target root is the base path of these file references. The <i>Parameter</i> section of the Validate Tool Report will indicate the base path that the tool uses to resolve relative file references in a Manifest file. This is found under the setting <i>Manifest File Base Path</i>.
        </p>
        
        <p>The following command demonstrates performing Checksum Manifest file validation against the dph example archive bundle using its manifest file <i>bundle_checksums.txt</i>: 
        </p>
        
        <source>
% validate /home/pds4/dph_example_archive_VG2PLS -M /home/pds4/dph_example_archive_VG2PLS/bundle_checksums.txt
        </source>
        
        <p>In the example above, the base path of the file references in the <i>bundle_checksums.txt</i> file is assumed to be <i>/home/pds4/dph_example_archive_VG2PLS</i>.
        </p>
        
        <p>Another use case is doing checksum manifest file validation on a sub-directory of a bundle. Using the dph example archive bundle example, we would need to tell the tool to use a different base than the target root since the file references in the <i>bundle_checksums.txt</i> file would not match up with the target sub-directory. This can be done using the <i>-B</i> flag option. The following command demonstrates performing Checksum Manifest file validation on a a sub-directory of the dph example archive bundle:
        </p>
        
        <source>
% validate /home/pds4/dph_example_archive_VG2PLS/browse -M /home/pds4/dph_example_archive_VG2PLS/bundle_checksums.txt -B /home/pds4/dph_example_archive_VG2PLS
        </source>
        
        <p>In the command line example above, the base path is set to <i>/home/pds4/dph_example_archive_VG2PLS</i>.
        </p>
        
        <p>In the event that multiple targets are specified when performing checksum manifest file validation, the <i>-B</i> flag option must be specified. Continuing with the dph example archive bundle example, the following command demonstrates Checksum Manifest file validation on multiple sub-directories of the bundle:
        </p>

        <source>
% validate /home/pds4/dph_example_archive_VG2PLS/browse, /home/pds4/dph_example_archive_VG2PLS/context \ 
-M /home/pds4/dph_example_archive_VG2PLS/bundle_checksums.txt \
-B /home/pds4/dph_example_archive_VG2PLS
        </source>
        
      </subsection>

      <subsection name="Using an XML Catalog">
        <p>An XML Catalog allows the user to describe a mapping between external entity references in their products and locally-available XML Schema documents. This feature of the tool is not fully implemented and needs to be exercised with multiple PDS scenarios, but it is available to experiment with in this release. The following is an example XML Catalog file for validating the Data Provider's Handbook (DPH) example bundle. The file maps the PDS namespace to a local copy of the PDS4 Ops XML Schema document and the DPH namespace to a local copy of the DPH example dictionary XML Schema document.
        </p>

        <source>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog"&gt;
  &lt;group xml:base="file:///${HOME}/"&gt;
    &lt;uri name="http://pds.nasa.gov/pds4/pds/v03"
         uri="VG2PLS/schemas/PDS4_OPS_0600h.xsd"/&gt;
    &lt;uri name="http://pds.nasa.gov/pds4/dph/v01"
         uri="VG2PLS/local_dictionaries/dph_example_dict_0300a.xsd"/&gt;
  &lt;/group&gt;
&lt;/catalog&gt;
        </source>

        <p>There is actually a third schema document <i>Product_TableChar_tailored_0600h.xsd</i>, that is required for validation that references the DPH dictionary schema document with an <i>&lt;xs:include&gt;</i> statement. This is where the issue occurs with the current implementation. This schema document must be passed on the command-line (instead of being specified in the XML Catalog) when executing the Validate Tool. The following command will validate DPH example bundle correctly:
        </p>

        <source>
% validate -t ${HOME}/VG2PLS_archive -C catalog.xml \
-x ${HOME}/VG2PLS_archive/schemas/Product_TableChar_tailored_0600h.xsd
        </source>
      </subsection>

      <subsection name="Using a Configuration File">
        <p>A configuration file is an alternative way to set the different behaviors of the tool instead of the command-line option flags. It consists of a text file made up of keyword/value pairs. The configuration file follows the syntax of the stream parsed by the Java Properties.load(java.io.InputStream) method.
        </p>

        <p>Some of the important syntax rules are as follows:
        </p>

        <ul>
          <li>Blank lines and lines which begin with the hash character "#" are ignored.</li>
          <li>Values may be separated on different lines if a backslash is placed at the end of the line that continues below.</li>
          <li>Escape sequences for special characters like a line feed, a tabulation or a unicode character, are allowed in the values and are specified in the same notation as those used in Java strings (e.g. \n, \t, \r).</li>
        </ul>

        <p>Since backslashes (\) have special meanings in a configuration file, keyword values that contain this character will not be interpreted properly by the Validate Tool even if it is surrounded by quotes. A common example would be a Windows path name (e.g. c:\pds\collection). Use the forward slash character instead (c:/pds/collection) or escape the backslash character (c:\\pds\\collection).
        </p>

        <p>Note: Any flag specified on the command-line takes precedence over any equivalent settings placed in the configuration file.
        </p>

        <p>The following table contains valid keywords that can be specified in the configuration file:</p>

        <table>
          <tr><th>Property Keyword</th><th>Associated Command-Line Option</th></tr>
          <tr><td>validate.target</td><td>-t, --target</td></tr>
          <tr><td>validate.rule</td><td>-R, --rule</td></tr>
          <tr><td>validate.checksum</td><td>-M, --checksum-manifest</td></tr>
          <tr><td>validate.basePath</td><td>-B, --base-path</td></tr>
          <tr><td>validate.catalog</td><td>-C, --catalog</td></tr>
          <tr><td>validate.schema</td><td>-x, --xsd</td></tr>
          <tr><td>validate.schematron</td><td>-S, --schematron</td></tr>
          <tr><td>validate.report</td><td>-r, --report-file</td></tr>
          <tr><td>validate.verbose</td><td>-v, --verbose</td></tr>
          <tr><td>validate.reportStyle</td><td>-s, --report-style</td></tr>
          <tr><td>validate.regexp</td><td>-e, --regexp</td></tr>
          <tr><td>validate.local</td><td>-L, --local</td></tr>
          <tr><td>validate.model</td><td>-m, --model-version</td></tr>
          <tr><td>validate.force</td><td>-f, --force</td></tr>
        </table>

        <p>The following example demonstrates how to set a configuration file:
        </p>

        <source>
# This is a Validate Tool configuration file

validate.target = ./collection
validate.report = report.txt
validate.regexp = "*.xml"
        </source>

        <p>This is equivalent to running the tool with the following flags:
        </p>

        <source>
-t ./collection -e "*.xml" -r report.txt
        </source>

        <p>The following example demonstrates how to set a configuration file with multiple values for a keyword:
        </p>
        <source>
# This is a Validate Tool configuration file with multiple values

validate.target = product.xml, ./collection
validate.regexp = "*.xml", "Mars*"
        </source>

        <p>This is equivalent to running the tool with the following flags:
        </p>

        <source>
-t product.xml, ./collection -e "*.xml", "Mars*"
        </source>

        <p>The following example demonstrates how to set a configuration file with multiple values that span across multiple lines:
        </p>

        <source>
# This is a Validate configuration file with multiple values
# that span across multiple lines

validate.target = product.xml, \
                  ./collection
validate.regexp = "*.xml", \
                  "Mars*"
        </source>

        <p>As previously mentioned, any flag options set on the command-line will overwrite settings set in the configuration file. The following example demonstrates how to override a setting in the configuration file.
        </p>

        <p>Suppose the configuration file named <i>config.txt</i> is defined as follows:
        </p>
        <source>
validate.target = ./collection
validate.regexp = "*.xml"
        </source>

        <p>This configuration allows the tool to validate files with a <i>.xml</i> extension in the <i>collection</i> directory. To change the behavior to validate all files instead of just files ending in <i>.xml</i>, then specify the <i>regexp</i> flag option on the command-line to overwrite the <i>validate.regexp</i> property:
        </p>
        <source>
% validate -c config.txt -e "*"
        </source>
      </subsection>

      <subsection name="Passing in Multiple Schemas">
        <p>The Validate Tool allows multiple XML Schemas to be passed in through the command-line via the <i>-x</i> flag option. When passing in multiple schemas, the definitions found in each file are merged internally. In the case where two schemas are passed in and both define the same element under the same namespace, then the definition in the first schema passed in will take precedence over the second schema. As an example, suppose a schema file, <i>schema1.xsd</i>, contains the following definition:
        </p>

        <source>
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://pds.nasa.gov/pds4/pds/v1"
  xmlns:pds="http://pds.nasa.gov/pds4/pds/v1"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="1.1.0.0"&gt;

...

&lt;xs:complexType name="File_Area_Browse"&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt; The File Area Browse class describes a file and one or more tagged_data_objects contained within the file. &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:complexContent&gt;
    &lt;xs:extension base="pds:File_Area"&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="File" type="pds:File" minOccurs="1" maxOccurs="1"&gt; &lt;/xs:element&gt;
        &lt;xs:choice minOccurs="1" maxOccurs="unbounded"&gt;
          &lt;xs:element name="Array_1D" type="pds:Array_1D"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_2D" type="pds:Array_2D"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_2D_Image" type="pds:Array_2D_Image"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_2D_Map" type="pds:Array_2D_Map"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_2D_Spectrum" type="pds:Array_2D_Spectrum"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_3D" type="pds:Array_3D"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_3D_Image" type="pds:Array_3D_Image"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_3D_Movie" type="pds:Array_3D_Movie"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_3D_Spectrum" type="pds:Array_3D_Spectrum"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Encoded_Header" type="pds:Encoded_Header"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Encoded_Image" type="pds:Encoded_Image"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Header" type="pds:Header"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Stream_Text" type="pds:Stream_Text"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Table_Binary" type="pds:Table_Binary"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Table_Character" type="pds:Table_Character"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Table_Delimited" type="pds:Table_Delimited"&gt; &lt;/xs:element&gt;
        &lt;/xs:choice&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:extension&gt;
  &lt;/xs:complexContent&gt;
&lt;/xs:complexType&gt;

...
        </source>

        <p>Suppose the other schema, <i>schema2.xsd</i>, contains the same element definition:
        </p>

        <source>
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://pds.nasa.gov/pds4/pds/v1"
  xmlns:pds="http://pds.nasa.gov/pds4/pds/v1"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="1.0.0.0"&gt;

...

&lt;xs:complexType name="File_Area_Browse"&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt; The File Area Browse class describes a file and one or more tagged_data_objects contained within the file. &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:complexContent&gt;
    &lt;xs:extension base="pds:File_Area"&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="File" type="pds:File" minOccurs="1" maxOccurs="1"&gt; &lt;/xs:element&gt;
        &lt;xs:choice minOccurs="1" maxOccurs="unbounded"&gt;
          &lt;xs:element name="Array_2D" type="pds:Array_2D"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_2D_Image" type="pds:Array_2D_Image"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_2D_Map" type="pds:Array_2D_Map"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_2D_Spectrum" type="pds:Array_2D_Spectrum"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_3D" type="pds:Array_3D"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_3D_Image" type="pds:Array_3D_Image"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_3D_Movie" type="pds:Array_3D_Movie"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Array_3D_Spectrum" type="pds:Array_3D_Spectrum"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Encoded_Header" type="pds:Encoded_Header"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Encoded_Image" type="pds:Encoded_Image"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Header" type="pds:Header"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Stream_Text" type="pds:Stream_Text"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Table_Binary" type="pds:Table_Binary"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Table_Character" type="pds:Table_Character"&gt; &lt;/xs:element&gt;
          &lt;xs:element name="Table_Delimited" type="pds:Table_Delimited"&gt; &lt;/xs:element&gt;
        &lt;/xs:choice&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:extension&gt;
  &lt;/xs:complexContent&gt;
&lt;/xs:complexType&gt;

...
        </source>

        <p>If the schemas are passed into the Validate Tool as follows:
        </p>

        <source>
% validate product.xml -x schema1.xsd, schema2.xsd
        </source>

        <p>then the <i>File_Area_Browse</i> definition from the <i>schema1.xsd</i> file takes precedence over the <i>schema2.xsd</i> file. If it was passed into the tool in the reverse order, then the <i>File_Area_Browse</i> definition in the <i>schema2.xsd</i> file will take precedence over the one in the <i>schema1.xsd</i> file.
        </p>
      </subsection>
    </section>

    <section name="Report Format">
      <p>This section describes the contents of the Validate Tool report. The links below detail the validation results of the same run for each format.
      </p>

      <p>The tool can represent a validation report in three different formats: a full, XML, or JSON format. The report style option is used to change the formatting. When this option is not specified on the command-line, the default is to generate a full report.
      </p>

      <subsection name="Full Report">
        <p>In a <a href="reports/index-full.html">full</a> report, the location, severity, and textual description of each detected anomaly is reported. A 'PASS', 'FAIL', or 'SKIP' keyword is displayed next to each file to indicate when a file has passed, failed, or skipped PDS validation, respectively.
        </p>
      </subsection>

      <subsection name="XML Report">
        <p>In an <a href="reports/index-xml.html">XML</a> report, the contents are the same as the full report.
        </p>
      </subsection>

      <subsection name="JSON Report">
        <p>In a <a href="reports/index-json.html">JSON</a> report, the contents are the same as the full report. Currently, the tool only supports validation runs of only a single data product label when generating this type of report.
        </p>
      </subsection>
    </section>

    <section name="Common Errors">
      <p><b><i>White spaces are required error</i></b></p>
      
      <p>Execution of the Validate Tool may result in the following message appearing in the log:
      </p>

      <source>
FAIL: file:/Users/.../hi0173794441_9080000_001_r.xml
    FATAL_ERROR  line 1, 55: White spaces are required between publicId and systemId.
      </source>

      <p>The message above is generated by the underlying <a href="http://xerces.apache.org/">Xerces</a> library that is utilized by the Validate Tool for XML Schema validation. Although not very intuitive, the message normally indicates that the XML Schema for the default namespace of the target label is missing. In the example above the default namespace was "http://pds.nasa.gov/pds4/pds/v03" but the XML Schema file describing that namespace (PDS4_PDS_0300a.xsd) was not provided to the tool at runtime.
      </p>
      
      <p><b><i>No checksum found in the manifest errors</i></b></p>
      
      <p>When performing Checksum Manifest file validation, having the wrong base path setting will result in multiple errors like the following:
      </p>
      
      <source>
FAIL: file:/home/pds4/dph_example_archive_VG2PLS/browse/Collection_browse.xml
    ERROR  No checksum found in the manifest for 'file:/home/pds4/dph_example_archive_VG2PLS/browse/Collection_browse.xml'.     
      </source>
      
      <p>To resolve this issue, check that the base path setting correctly resolves the relative file references (if present) in the Checksum Manifest file by looking at the <i>Manifest File Base Path</i> parameter specified at the top of the Validate Tool report. If the base path is incorrect, specify the correct one on the command line using the <i>-B, --base-path</i> flag option.
      </p>
      
      <p>
      </p>
    </section>
  </body>
</document>
