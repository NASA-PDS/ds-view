package gov.nasa.pds.imaging.generate.automatic.elements;

import gov.nasa.pds.imaging.generate.TemplateException;
import gov.nasa.pds.imaging.generate.constants.TestConstants;
import gov.nasa.pds.imaging.generate.label.PDS3Label;
import gov.nasa.pds.imaging.generate.label.PDSObject;
import gov.nasa.pds.imaging.generate.test.GenerateTest;
import gov.nasa.pds.imaging.generate.util.Utility;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class AutoGeneratedElementsTest extends GenerateTest {

    private PDSObject pdsObj;
    private String filePath;
    
	@Rule
	public SingleTestRule test = new SingleTestRule("");
    
    @Before
    public void setUp() throws Exception {
    	this.filePath = Utility.getAbsolutePath(TestConstants.EXAMPLE_DIR + "/mpf_example/i985135l.img");
    	//this.filePath = Utility.getAbsolutePath(TestConstants.EXAMPLE_DIR + "/mpf_example/i646954r.img");
        this.pdsObj = new PDS3Label(this.filePath);
        this.pdsObj.setMappings();
    }

//    @After
//    public void tearDown() throws Exception {
//    }
    
    /**
     * Test md5 checksum
     * 
     * @throws TemplateException
     * @throws IOException 
     */
    @Test
    public final void testMd5Checksum() throws TemplateException, IOException {
    	Md5Checksum chksum = new Md5Checksum();
    	chksum.setParameters(this.pdsObj);
    	String actualMd5 = chksum.getValue();
    	
    	// Create map of possible md5 software paths
    	// Map include path and field in output that has md5 checksum
    	Map<String, Integer> pathMap = new HashMap<String, Integer>();
    	pathMap.put("/usr/bin/md5sum", 0);
    	pathMap.put("/sbin/md5", 3);
    	File md5exec = null;
    	int success = 0;
    	String path = "";
    	for (String p : pathMap.keySet()) {
    		path = p;
    		md5exec = new File(path);
			if (md5exec.exists()) {
				success = 1;
				break;
			}
    	}
    	
    	if (success == 1) {
    		Runtime rt = Runtime.getRuntime();
    		Process pr = rt.exec(path + " " + this.filePath);
    		BufferedReader stdInput = new BufferedReader(new InputStreamReader(pr.getInputStream()));
    		String stdIn = stdInput.readLine();
    		String expectedMd5 = "";
    		if (stdIn != null) {
    			expectedMd5 = stdIn.split(" ")[pathMap.get(path)];
    		}

    		assertEquals(expectedMd5, actualMd5);
    	} else {
    		System.err.println("No MD5 software found. Cannot perform test.");
    	}
    }  
    
    /**
     * Test md5 checksum
     * 
     * TODO Can't get this test to work
     * 
     * @throws Exception 
     */
//    @Test
//    public final void testObjectMd5Checksum() throws Exception {
//    	ObjectMd5Checksum chksum = new ObjectMd5Checksum();
//    	chksum.setParameters(this.pdsObj);
//    	String actualMd5 = chksum.getValue();
//    	System.out.println(actualMd5);
//    	
//    	
//		Runtime rt = Runtime.getRuntime();
//		String tfile = System.getProperty("user.dir") + "/" + TestConstants.TEST_OUT_DIR + "/partial.img";
//		System.out.println("/usr/bin/tail -c +" + chksum.offset + " " + this.filePath + " > " + tfile);
//		Process pr = rt.exec("/usr/bin/tail -c +" + String.valueOf(chksum.offset) + " " + this.filePath + " > " + tfile);
//		pr.waitFor();
//		System.out.println(pr.exitValue());
//		BufferedReader stdInput = new BufferedReader(new InputStreamReader(pr.getInputStream()));
//		String s = "";
//		while ((s = stdInput.readLine()) != null) {
//		System.out.println(s);
//		}
//		Md5Checksum tchksum = new Md5Checksum();
//		PDSObject tObj = new PDS3Label(tfile);
//    	chksum.setParameters(tObj);
//    	String expectedMd5 = tchksum.getValue();
//
//		assertEquals(expectedMd5, actualMd5);
    //}  

}
