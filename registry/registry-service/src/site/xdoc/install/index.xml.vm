<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2010-2013, by the California Institute of Technology.
  ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged.
  Any commercial use must be negotiated with the Office of Technology Transfer
  at the California Institute of Technology.

  This software is subject to U. S. export control laws and regulations
  (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the extent that the software
  is subject to U.S. export control laws and regulations, the recipient has
  the responsibility to obtain export licenses or other export authority as
  may be required before exporting such information to foreign countries or
  providing access to foreign nationals.

  $Id$
-->

<document>
  <properties>
    <title>Installation</title>
    <author email="Paul.Ramirez@jpl.nasa.gov">Paul Ramirez</author>
    <author email="Sean.Hardman@jpl.nasa.gov">Sean Hardman</author>
  </properties>

  <body>
    <section name="Installation">
      <p>This document describes how to install the Registry Service software contained in the <i>${project.artifactId}</i> package. The following topics can be found in this section:
      </p>

      <ul>
        <li><a href="#System_Requirements">System Requirements</a></li>
        <li><a href="#Unpacking_the_Package">Unpacking the Package</a></li>
        <li><a href="#Upgrade_an_Existing_Installation">Upgrade an Existing Installation</a></li>
        <li><a href="#Deploying_the_Database">Deploying the Database</a></li>
        <li><a href="#Deploying_the_Application">Deploying the Application</a></li>
        <li><a href="#General_Configuration">General Configuration</a></li>
        <li><a href="#Secure_Configuration">Secure Configuration</a></li>
      </ul>
    </section>

    <section name="System Requirements">
      <p>This section details the system requirements for installing and operating the Registry Service.
      </p>

      <subsection name="Java Runtime Environment">
        <p>The Registry Service was developed using Java and <a href="http://jersey.dev.java.net/" target="_blank">Jersey</a> and will run on any platform with a supported Java Runtime Environment (JRE). The software was specifically developed under Java version 1.6 and has only been tested with this version. The following commands test the local Java installation in a UNIX-based environment:
        </p>

        <source>
% which java
/usr/bin/java

% java -version
java version "1.6.0_26"
Java(TM) SE Runtime Environment (build 1.6.0_26-b03-384-10M3425)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02-384, mixed mode)
        </source>

        <p>The first command above checks whether the <i>java</i> executable is in the environment's path and the second command reports the version. If Java is not installed or the version is not at least 1.6, Java will need to be downloaded and installed in the current environment. Consult the local system administrator for installation of this software. For the do-it-yourself crowd, the Java software can be downloaded from the <a href="http://www.oracle.com/technetwork/java/javase/downloads/" target="_blank">Oracle Java Download</a> page. The software package of choice is the Java Standard Edition (SE) 6, either the JDK or the JRE package. The JDK package is not necessary to run the software but could be useful if development and compilation of Java software will also occur in the current environment.
        </p>
      </subsection>

      <subsection name="Java Application Server">
        <p>The Registry Service requires a Java application server for hosting the web application. The suggested application server for this release is Apache Tomcat with a minimal version of 6.0.20 through version 7.0.X. Avoid version 7.0.29, there is a bug in this version causing an error when loading the Registry Service. Consult the local system administrator for installation of this software. For the do-it-yourself crowd, see the <a href="../../../release/index-tomcat.html" target="_blank">Tomcat Deployment</a> document for installation and configuration details.
        </p>
      </subsection>

      <subsection name="cURL Utility">
        <p>Although it is generally a useful tool for interacting with the Registry Service, the <a href="http://curl.haxx.se/" target="_blank">cURL</a> command-line application is required by the <i>RegistryConfig</i> script for populating the service with the supported object types. See the <a href="#Configuring_the_Application">Configuration</a> section for more information on configuring the service. If <i>cURL</i> is not installed on the local machine but <i>Wget</i> is, see the <a href="../operate/index-wget.html">Using Wget</a> section for converting <i>cURL</i> commands to <i>Wget</i> commands.
        </p>
      </subsection>

      <subsection name="Database Server">
        <p>The Registry Service comes prepackaged with the <a href="http://db.apache.org/derby/" target="_blank">Apache Derby</a> database. If another database solution is desired (i.e., MySQL), it should be installed and accessible by the Registry Service. See the <a href="#Deploying_the_Database">Deploying the Database</a> section if this is the first time you are installing the registry service and <a href="#Database_Configuration">Configuration</a> section for more information on configuring the service for a different database solution.
        </p>
      </subsection>
    </section>

    <section name="Unpacking the Package">
      <p>Download the <i>${project.artifactId}</i> package from the PDS <a href="ftp://pds.nasa.gov/pub/toplevel/2010/registry/" target="_blank">FTP</a> site. The binary distribution is available in identical zip or tar/gzip packages. The installation directory may vary from environment to environment but in UNIX-based environments it is typical to install software packages in the <i>/usr/local</i> directory and in Windows-based environments it is typical to install software packages in the <i>C:\Program Files</i> directory. Unpack the selected binary distribution file with one of the following commands:
      </p>

      <source>
% unzip ${project.artifactId}-${project.version}-bin.zip
or
% tar -xzvf ${project.artifactId}-${project.version}-bin.tar.gz
      </source>

      <p>Note: Depending on the platform, the native version of <i>tar</i> may produce an error when attempting to unpack the distribution file because many of the file paths are greater than 100 characters. If available, the GNU version of tar will resolve this problem. If that is not available or cannot be installed, the zipped package will work just fine in a UNIX environment.
      </p>

      <p>The commands above result in the creation of the <i>${project.artifactId}-${project.version}</i> directory with the following directory structure:
      </p>

      <ul>
        <li><b>README.txt</b><br/>
          <p>A README file directing the user to the available documentation for the project.
          </p>
        </li>
        <li><b>LICENSE.txt</b><br/>
          <p>The copyright notice from the <a href="http://www.caltech.edu/" target="_blank">California Institute of Technology</a> detailing the restrictions regarding the use and distribution of this software. Although the license is strictly worded, the software has been classified as Technology and Software Publicly Available (TSPA) and is available for <i>anyone</i> to download and use.
          </p>
        </li>
        <li><b>registry.war</b><br/>
          <p>This is the Web ARchive (WAR) file containing the Registry Service software including all dependent JAR files.
          </p>
        </li>
        <li><b>bin/</b><br/>
          <p>This directory contains the batch and shell scripts for registering the supported object types.
          </p>
        </li>
        <li><b>lib</b><br/>
          <p>This directory contains jar files for working with the Derby Database.
          </p>
        </li>
        <li><b>conf/</b><br/>
          <p>This directory contains the policy files identifying the supported object types.
          </p>
        </li>
        <li><b>doc/</b><br/>
          <p>This directory contains a local web site with the Registry Service documentation, javadoc, unit test results and other configuration management related information. Just point the desired web browser to the <i>index.html</i> file in this directory.
          </p>
        </li>
        <li><b>examples/</b><br/>
          <p>This directory contains examples of artifact descriptions that can be registered with a service instance.
          </p>
        </li>
      </ul>
    </section>

    <section name="Upgrade an Existing Installation">
      <p>If this installation is an upgrade of an existing installation, then a determination as to whether to keep the existing database needs to be made.
      </p>

      <subsection name="Keep Existing Database">
        <p>If the database is to be carried over to the upgraded installation, then the <a href="#Deploying_the_Database">Deploying the Database</a> section of this document should be skipped over but the following sections should be exercised as they would for a new installation with the exception that the configuration for the existing installation should be replicated in the upgrade:
        </p>

        <ul>
          <li><a href="#Deploying_the_Application">Deploying the Application</a></li>
          <li><a href="#General_Configuration">General Configuration</a></li>
          <li><a href="#Secure_Configuration">Secure Configuration</a></li>
        </ul>

        <p>If the existing installation is version 1.3.0, then the database needs to be updated. The following is a set of instructions for creating the database and installing the registry schema that are dependent on the database server to be used in the current environment.
        </p>

        <p>For a Derby database instance, execute the following commands to update the database to version 1.4.0 and beyond:
        </p>

        <source>
% cd ${project.artifactId}-${project.version}
% java -Djava.ext.dirs=lib/ org.apache.derby.tools.ij
ij> connect 'jdbc:derby:registry;user=registry';
ij> run 'conf/registry-schema-upgrade-1.4.0.ddl';
ij> exit;
        </source>

        <p>For a MySQL database, execute the following commands to update the MySQL database to version 1.4.0 and beyond:
        </p>

        <source>
% cd ${project.artifactId}-${project.version}
% mysql -u root -p -D registry &lt; conf/registry-schema-upgrade-1.4.0.ddl
        </source>

        <p>For a PostgreSQL database, execute the following commands to update the PostgreSQL database to version 1.4.0 and beyond:
        </p>

        <source>
% cd ${project.artifactId}-${project.version}
% psql -U postgres
postgres=# \c registry registry
postgres=# \i conf/registry-schema-upgrade-1.4.0.ddl
postgres=# \q
        </source>
      </subsection>

      <subsection name="Delete Existing Database">
        <p>If the determination was to not keep the existing database, then the database can be deleted. Prior to deleting the database, shutdown the Tomcat server. The following is a set of instructions for deleting the database that are dependent on the database server used in the current environment.
        </p>

        <p>For a Derby database instance, execute the following to delete the database (the path was specified in the <a href="#Database_Configuration">Configuration</a> section):
        </p>

        <source>
% cd /path/to/registrydb/home
% rm -rf registry derby.log
        </source>

        <p>For a MySQL database instance, execute the following to delete the database from the database server: 
        </p>

        <source>
% mysqladmin -u root -p drop registry
        </source>

        <p>For a PostgreSQL database instance, execute the following to delete the database from the database server: 
        </p>

        <source>
% psql -U postgres
postgres=# drop database registry
postgres=# \q
        </source>

        <p>Once the database has been deleted, see the <a href="#Deploying_the_Database">Deploying the Database</a> section for instructions on how to create a new database and install the registry schema. When the new database is in place, restart the Tomcat server. The following sections should then be exercised as they would for a new installation with the exception that the configuration for the existing installation should be replicated in the upgrade:
        </p>

        <ul>
          <li><a href="#Deploying_the_Application">Deploying the Application</a></li>
          <li><a href="#General_Configuration">General Configuration</a></li>
          <li><a href="#Secure_Configuration">Secure Configuration</a></li>
        </ul>
      </subsection>
    </section>

    <section name="Deploying the Database">
      <p>If this is the first time the Registry Service has been installed, then a new registry database must be deployed. If you already have an existing registry database, see down to the <a href="#Database_Configuration">Configuration</a> section for instructions on how to configure the Registry Service to access the existing database. The following is a set of instructions for creating the database and installing the registry schema that are dependent on the database server to be used in the current environment.
      </p>

      <subsection name="Derby">
        <p>The Derby database comes packaged with the Registry Service. The following commands will create the database and install the registry schema: 
        </p>

        <source>
% cd ${project.artifactId}-${project.version}
% java -Djava.ext.dirs=lib/ org.apache.derby.tools.ij
ij> connect 'jdbc:derby:registry;create=true;user=registry';
ij> run 'conf/derby-registry-schema.ddl';
ij> exit;
        </source>

        <p>The <i>registry</i> directory, which is the Derby database, will now be present in the current working directory. The path to this directory can be specified in the <a href="#Database_Configuration">Configuration</a> section. Note: Feel free to move this <i>registry</i> directory to anywhere on disk that is accessible by Tomcat and configured below. In addition, if the Tomcat server is not running as the <i>root</i> user, the <i>registry</i> directory containing the Derby database (wherever it is located) must be owned by the same user account that is utilized to run the Tomcat server.
        </p>
      </subsection>

      <subsection name="MySQL">
        <p>If choosing to utilize an existing MySQL database server, perform the commands below. If installing a new instance of MySQL, consult the local system administrator for installation of this software. For the do-it-yourself crowd, the MySQL software can be downloaded from the <a href="http://www.mysql.com/downloads/mysql/" target="_blank">MySQL Community Server Download</a> page. Choose the appropriate package (version 5.5.X) for the target environment. Once the installation is complete, perform the commands below to create the database and install the registry schema:
        </p>

        <source>
% cd ${project.artifactId}-${project.version}
% mysqladmin -u root -p create registry
% mysql -u root -p -e "GRANT ALL ON registry.* TO registry@localhost \
  IDENTIFIED BY 'p@ssw0rd'"
% mysql -u root -p -D registry &lt; conf/mysql-registry-schema.ddl
        </source>
      </subsection>

      <subsection name="PostgreSQL">
        <p>If choosing to utilize an existing PostgreSQL database server, perform the commands below. If installing a new instance of PostgreSQL, consult the local system administrator for installation of this software. For the do-it-yourself crowd, the PostgreSQL software can be downloaded from the <a href="http://www.postgresql.org/download/" target="_blank">PostgreSQL Download</a> page. Choose the appropriate package (version 9.X) for the target environment. Once the installation is complete, perform the commands below to create the database and install the registry schema:
        </p>

        <source>
% cd ${project.artifactId}-${project.version}
% psql -U postgres
postgres=# CREATE USER registry WITH password 'p@ssw0rd';
postgres=# CREATE DATABASE registry WITH OWNER registry;
postgres=# \c registry registry
postgres=# \i conf/postgres-registry-schema.ddl
postgres=# \q
        </source>
      </subsection>
    </section>

    <section name="Deploying the Application">
      <p>The Registry Service web application is packaged as a WAR file (<i>registry.war</i>) and is intended for installation under a standard Java Application Server. For a Tomcat server deployment, the WAR file is normally copied directly to the <i>$TOMCAT_HOME/webapps</i> directory or installed via the Manager interface. Once this step is complete, the application is ready for operation. Verify a successful installation by executing the following command:
      </p>

      <source>
% curl -X GET -H "Accept:application/xml" -v \
http://localhost:8080/registry/
      </source>

      <p>The above command will return the list of links to the service's endpoints and an HTTP status of 200. From a web browser, the command returns a welcome message. Make sure to include the trailing slash on the above command.
      </p>


      <p>When deploying the application via the Tomcat Manager interface, users have occasionally encountered a situation where the application appears to hang or generates the following stack trace:
      </p>

      <source>
javax.servlet.ServletException: java.lang.OutOfMemoryError: PermGen space
  com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:424)
  com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:497)
  com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:855)
  com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:828)
  com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:789)
  org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal
  (OpenEntityManagerInViewFilter.java:113)
  org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
      </source>

      <p>If the above situation occurs, stop and restart the Tomcat server to clear the problem.
      </p>
    </section>

    <section name="General Configuration">
      <p>The following steps configure the Registry Service for the target installation and ready the service for operation.
      </p>
      
      <subsection name="Database Configuration">
        <p>The following is a set of instructions for configuring the Registry Service to access an existing database that are dependent on the database server to be used in the current environment.
        </p>

        <subsection name="Derby">
          <p>By default, the Registry Service comes packaged with and configured to utilize Derby as the backend database. The Derby database home directory will default to the current working directory where the Tomcat server was launched. To permanently set the home directory of the database, add the following property to the <i>CATALINA_OPTS</i> environment variable:
          </p>

          <source>
CATALINA_OPTS="-Dderby.system.home=/path/to/registrydb/home"
          </source>
        
          <p>Note: The "derby.system.home" should point to the parent directory which contains the registry database (i.e. the parent directory of the "registry" directory). See the <a href="../../../release/index-tomcat.html#Environment_Configuration">Tomcat Deployment</a> document for details on specifying the <i>CATALINA_OPTS</i> environment variable. The <i>CATALINA_OPTS</i> environment variable is loaded from the Tomcat startup scripts. The Tomcat server will need to be restarted for this configuration to take effect.
          </p>
        </subsection>

        <subsection name="MySQL">
          <p>The backend database can be changed from Derby to MySQL. To modify the configuration, edit the <i>applicationContext.xml</i> file located in the <i>$TOMCAT_HOME/webapps/registry/WEB-INF/classes</i> directory. The following line:
          </p>

          <source>
&lt;context:property-placeholder location="classpath:derby.properties"/&gt;

  should be changed to:

&lt;context:property-placeholder location="classpath:mysql.properties"/&gt;
          </source>

          <p>The default configuration assumes that you have MySQL installed with a database named <i>registry</i> and will use a default user name and password as specified below. If you want to change the URL, database name, user name, and/or password you will need to edit the <i>mysql.properties</i> file located in the <i>$TOMCAT_HOME/webapps/registry/WEB-INF/classes</i> directory. The following lines pertain to the default configuration:
          </p>

          <source>
javax.persistence.jdbc.url=jdbc:mysql://localhost:3306/registry
javax.persistence.jdbc.user=registry
javax.persistence.jdbc.password=p@ssw0rd
          </source>

          <p>Additionally, if you are using a version of MySQL older than 5.x you will need to change the dialect. To do this simply add a "#" before the first hibernate.dialect entry and remove the "#" from the second entry.
          </p>

          <p>Before:</p>
          <source>
# For use with MySQL 5+
hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# For use with older versions of MySQL. See hibernate documentation.
#hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
          </source>
          <p>After:</p>
          <source>
# For use with MySQL 5+
#hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# For use with older versions of MySQL. See hibernate documentation.
hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
          </source>
        </subsection>

        <subsection name="PostgreSQL">
          <p>The backend database can be changed from Derby to PostgreSQL. To modify the configuration, edit the <i>applicationContext.xml</i> file located in the <i>$TOMCAT_HOME/webapps/registry/WEB-INF/classes</i> directory. The following line:
          </p>

          <source>
&lt;context:property-placeholder location="classpath:derby.properties"/&gt;

  should be changed to:

&lt;context:property-placeholder location="classpath:postgres.properties"/&gt;
          </source>

          <p>The default configuration assumes that you have PostgreSQL installed with a database named <i>registry</i> and will use a default user name and password as specified below. If you want to change the URL, database name, user name, and/or password you will need to edit the <i>postgres.properties</i> file located in the <i>$TOMCAT_HOME/webapps/registry/WEB-INF/classes</i> directory. The following lines pertain to the default configuration:
          </p>

          <source>
javax.persistence.jdbc.url=jdbc:postgresql://localhost:5432/registry
javax.persistence.jdbc.user=registry
javax.persistence.jdbc.password=p@ssw0rd
javax.persistence.jdbc.driver=org.postgresql.Driver
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate.hbm2ddl.auto=validate
jpa.database=POSTGRESQL
jpa.showSql=false
          </source>
        </subsection>
      </subsection>

      <subsection name="Home Configuration">
        <p>In a distributed environment with multiple Registry Service instances, the registry home value identifies the source of a registry entry when it has been replicated to another registry instance. By default, the registry home is configured as <i>http://localhost:8080/registry</i>. This should be modified to represent the Registry Service URL location of the local installation. Meaning that instead of <i>localhost</i>, the fully qualified name of the local machine should be specified (e.g., node.nasa.gov). To modify the configuration, edit the <i>applicationContext.xml</i> file located in the <i>$TOMCAT_HOME/webapps/registry/WEB-INF/classes</i> directory. Modify the following line with the new URL location:
        </p>

        <source>
&lt;bean id="idGenerator" class="gov.nasa.pds.registry.model.naming.DefaultIdentifierGenerator"
p:home="http://localhost:8080/registry"/&gt;

  should be changed to (if hosted at node.nasa.gov on port 80):

&lt;bean id="idGenerator" class="gov.nasa.pds.registry.model.naming.DefaultIdentifierGenerator"
p:home="http://node.nasa.gov/registry"/&gt;
        </source>
      </subsection>

      <p>If either the database configuration or home configuration were changed above in the deployed application directory under the <i>$TOMCAT_HOME</i> directory, the Registry Service application must be stopped and started for these changes to take effect. This can be accomplished by restarting the Tomcat Server. Alternatively, if the Tomcat Manager interface was utilized for the deployment, find the Registry Service entry in the Manager interface, select the associated <i>Stop</i> button followed by a selection of the associated <i>Start</i> button to stop and then start the application, respectively.
      </p>

      <subsection name="Object Type Configuration">
        <p>Once the Registry Service is installed and running, the list of supported object types must be registered with the service. The list of object types corresponds with the types of products that a given instance of the Registry Service will support. The <i>registry-config</i> and <i>registry-config.bat</i> scripts default to a Registry Service URL location of <i>http://localhost:8080/registry</i>. If necessary, modify the appropriate script for the local environment so that it corresponds with the URL location of the target installation. In addition, this script should be executed prior to applying security to the service URLs since it does not account for a secured interface. Execute the script from the <i>bin</i> directory in order to register the full set of object types:
        </p>

        <source>
% cd ${project.artifactId}-${project.version}/bin
% ./registry-config
        </source>

        <p>The output from this command should show the registration of the Core object types and PDS object types. Since the configuration files referenced in the configuration script are slightly larger they are sent in chunks. Each configuration will get associated with a Registry Package and can be found by following the location link that comes in the header of the response. The output from the command should look something like the following:
        </p>

        <source>
* About to connect() to localhost port 8080 (#0)
*   Trying ::1... connected
* Connected to localhost (::1) port 8080 (#0)
&gt; POST /registry/configure?name=Core+Objects&amp;\
description=This+configures+the+core+set+of+registry+objects HTTP/1.1
&gt; User-Agent: curl/7.19.7 (universal-apple-darwin10.0) libcurl/7.19.7 OpenSSL/0.9.8l zlib/1.2.3
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; Content-type:application/xml
&gt; Content-Length: 5295
&gt; Expect: 100-continue
&gt; 
&lt; HTTP/1.1 100 Continue
&lt; HTTP/1.1 201 Created
&lt; Server: Apache-Coyote/1.1
&lt; Location: http://localhost:8080/registry/packages/\
urn:uuid:bd6e4f7b-dfb0-443c-b845-3378077b1016
&lt; Content-Type: text/plain
&lt; Transfer-Encoding: chunked
&lt; Date: Mon, 21 Mar 2011 19:55:52 GMT
&lt; 
* Connection #0 to host localhost left intact
* Closing connection #0
urn:uuid:bd6e4f7b-dfb0-443c-b845-3378077b1016

* About to connect() to localhost port 8080 (#0)
*   Trying ::1... connected
* Connected to localhost (::1) port 8080 (#0)
&gt; POST /registry/configure?name=PDS+Objects&amp;\
description=This+configures+PDS+object+types HTTP/1.1
&gt; User-Agent: curl/7.19.7 (universal-apple-darwin10.0) libcurl/7.19.7 OpenSSL/0.9.8l zlib/1.2.3
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; Content-type:application/xml
&gt; Content-Length: 18320
&gt; Expect: 100-continue
&gt; 
&lt; HTTP/1.1 100 Continue
&lt; HTTP/1.1 201 Created
&lt; Server: Apache-Coyote/1.1
&lt; Location: http://localhost:8080/registry/packages/\
urn:uuid:a07ad134-42ad-4781-9cbd-826bb9a8dfec
&lt; Content-Type: text/plain
&lt; Transfer-Encoding: chunked
&lt; Date: Mon, 21 Mar 2011 19:55:53 GMT
&lt; 
* Connection #0 to host localhost left intact
* Closing connection #0
urn:uuid:a07ad134-42ad-4781-9cbd-826bb9a8dfec
        </source>

        <p>Verify successful configuration by executing the command from the <a href="../operate/index.html#Report">Report</a> section of the Operation document. The output from this command should look something like the following:
        </p>

        <source>
&lt;ns2:report xmlns:ns2='http://registry.pds.nasa.gov' registryVersion='${project.version}' packages='4' 
classificationNodes='76' classificationSchemes='2' services='0' extrinsics='0' associations='78' 
serverStarted='2011-08-28T12:45:43.514-07:00' status='OK'/&gt;
        </source>
      </subsection>
    </section>

    <section name="Secure Configuration">
      <p>The following steps configure the Registry Service for secure access within the Tomcat Server. See the <a href="../../../release/index-tomcat.html" target="_blank">Tomcat Deployment</a> document for details on securing the Tomcat Server to support the application configuration that follows. To modify the configuration, edit the <i>web.xml</i> file located in the <i>$TOMCAT_HOME/webapps/registry/WEB-INF</i> directory. Add the following blocks of XML to the end of the file:
      </p>

      <source>
&lt;web-app&gt;
  ...
  &lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
      &lt;web-resource-name&gt;Registry Service&lt;/web-resource-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
      &lt;http-method&gt;DELETE&lt;/http-method&gt;
      &lt;http-method&gt;POST&lt;/http-method&gt;
      &lt;http-method&gt;PUT&lt;/http-method&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
      &lt;role-name&gt;{node}-admin&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
    &lt;user-data-constraint&gt;
      &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
    &lt;/user-data-constraint&gt;
  &lt;/security-constraint&gt;

  &lt;login-config&gt;
     &lt;auth-method&gt;BASIC&lt;/auth-method&gt;
     &lt;realm-name&gt;Tomcat User Manager&lt;/realm-name&gt;
  &lt;/login-config&gt;

  &lt;security-role&gt;
     &lt;role-name&gt;{node}-admin&lt;/role-name&gt;
  &lt;/security-role&gt;
&lt;/web-app&gt;
      </source>

      <p>The configuration above allows public access to the HTTP <i>GET</i> method but restricts access to the <i>DELETE</i>, <i>POST</i> and <i>PUT</i> methods. In addition, it sets up the security role that was configured during the Tomcat Server installation and forces a switch from <i>http</i> to <i>https</i>, using the secure protocol as follows:
      </p>

      <source>
http://localhost:8080/registry/extrinsics

  will be automatically redirected to:

https://localhost:8443/registry/extrinsics
      </source>

      <p>The configuration above restricts access to the entire application. In addition, it sets up the security role that was configured during the Tomcat Server installation. If the configuration was changed above, the Tomcat Server must be restarted.
      </p>
    </section>
  </body>
</document>
