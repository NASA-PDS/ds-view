<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2010-2011, by the California Institute of Technology.
  ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged.
  Any commercial use must be negotiated with the Office of Technology Transfer
  at the California Institute of Technology.

  This software is subject to U. S. export control laws and regulations
  (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the extent that the software
  is subject to U.S. export control laws and regulations, the recipient has
  the responsibility to obtain export licenses or other export authority as
  may be required before exporting such information to foreign countries or
  providing access to foreign nationals.

  $Id$
-->

<document>
  <properties>
    <title>Installation</title>
    <author email="Paul.Ramirez@jpl.nasa.gov">Paul Ramirez</author>
    <author email="Sean.Hardman@jpl.nasa.gov">Sean Hardman</author>
  </properties>

  <body>
    <section name="Installation">
      <p>This section describes how to install the Registry Service software contained in the <i>${xdoc-artifactId}</i> package. The following topics can be found in this section:
      </p>

      <ul>
        <li><a href="#System_Requirements">System Requirements</a></li>
        <li><a href="#Unpacking_the_Package">Unpacking the Package</a></li>
        <li><a href="#Deploying_the_Application">Deploying the Application</a></li>
        <li><a href="#Configuring_the_Application">Configuring the Application</a></li>
      </ul>
    </section>

    <section name="System Requirements">
      <p>The Registry Service was developed using Java and <a href="http://jersey.dev.java.net/" target="_blank">Jersey</a> and will run under a standard Java Application Server. The tool was specifically developed under Sun Java version 1.6, so the tool will execute correctly under 1.6 and future versions.
      </p>

      <p>Since the tool was developed using Sun's Java, the target Java Application Server should support Sun's Java Runtime Environment (JRE). The application was tested using Apache's Tomcat version 6.0.X, which is the preferred Java Application Server for deployment. The software can be obtained from the <a href="http://tomcat.apache.org/" target="_blank"> Apache Tomcat</a> web site. Other Java Application Servers should be compatible.
      </p>

      <p>Although it is generally a useful tool for interacting with the Registry Service, the <a href="http://curl.haxx.se/" target="_blank">cURL</a> command-line application is required by the <i>load_registry</i> script for populating the service with the supported object types. See the <a href="#Configuration">Configuration</a> section for more information.
      </p>
    </section>

    <section name="Unpacking the Package">
      <p>Download the <i>${xdoc-artifactId}</i> package from the PDS <a href="ftp://pds.nasa.gov/pub/toplevel/2010/registry/" target="_blank">FTP</a> site. The binary distribution is available in identical zip or tar/gzip packages. Unpack the selected binary distribution file with one of the following commands:
      </p>

      <source>
% unzip ${xdoc-artifactId}-${xdoc-version}-bin.zip
or
% tar -xzvf ${xdoc-artifactId}-${xdoc-version}-bin.tar.gz
      </source>

      <p>Note: Depending on the platform, the native version of <i>tar</i> may produce an error when attempting to unpack the distribution file because many of the file paths are greater than 100 characters. If available, the GNU version of tar will resolve this problem. If that is not available or cannot be installed, the zipped package will work just fine in a UNIX environment.
      </p>

      <p>The commands above result in the creation of the <i>${xdoc-artifactId}-${xdoc-version}</i> directory with the following directory structure:
      </p>

      <ul>
        <li><b>README.txt</b><br/>
          <p>A README file directing the user to the available documentation for the project.
          </p>
        </li>
        <li><b>LICENSE.txt</b><br/>
          <p>The copyright notice from the <a href="http://www.caltech.edu/" target="_blank">California Institute of Technology</a> detailing the restrictions regarding the use and distribution of this software. Although the license is strictly worded, the software has been classified as Technology and Software Publicly Available (TSPA) and is available for <i>anyone</i> to download and use.
          </p>
        </li>
        <li><b>${xdoc-artifactId}-${xdoc-version}.war</b><br/>
          <p>This is the Web ARchive (WAR) file containing the Registry Service software including all dependent JAR files.
          </p>
        </li>
        <li><b>bin/</b><br/>
          <p>This directory contains the batch and shell scripts for registering the supported object types.
          </p>
        </li>
        <li><b>conf/</b><br/>
          <p>This directory contains the policy files identifying the supported object types.
          </p>
        </li>
        <li><b>doc/</b><br/>
          <p>This document directory contains a local web site with the Registry Service Guide, javadoc, unit test results and other configuration management related information. Just point your favorite browser to the <i>index.html</i> file in this directory.
          </p>
        </li>
        <li><b>examples/</b><br/>
          <p>This directory contains examples of artifact descriptions that can be registered with a service instance.
          </p>
        </li>
      </ul>
    </section>

    <section name="Deploying the Application">
      <p>The Registry Service web application is packaged as a WAR file and is intended for installation under a standard Java Application Server. Prior to installation the WAR file should be renamed from <i>${xdoc-artifactId}-${xdoc-version}.war</i> to <i>registry.war</i>. A WAR file is normally copied directly to the <i>webapps</i> directory or installed via the Manager interface. Once this step is complete, the application is ready for operation. Verify a successful installation by executing the command from the <a href="../operate/index.html#Ping">Ping</a> portion of the Operation section.
      </p>

      <p>When deploying the application via the Tomcat Manager interface, users have occasionally encountered a situation where the application appears to hang or generates the following stack trace:
      </p>

      <source>
javax.servlet.ServletException: java.lang.OutOfMemoryError: PermGen space
  com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:424)
  com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:497)
  com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:855)
  com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:828)
  com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:789)
  org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal
  (OpenEntityManagerInViewFilter.java:113)
  org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
      </source>

      <p>If either of the above situations occur, stop and restart the Tomcat server to clear the problem.
      </p>

      <subsection name="Database Configuration">
        <p>By default, the Registry Service comes configured to utilize Derby as the backend database. The Derby database home directory will default to the current working directory where the Apache Tomcat server was launched. To permanently set the home directory of the database, add the following to the <i>CATALINA_OPTS</i> environment variable:
        </p>

        <source>
CATALINA_OPTS="-Dderby.system.home=/path/to/registrydb/home"
        </source>

        <p>The <i>CATALINA_OPTS</i> environment variable is loaded from the Apache Tomcat startup scripts. The Tomcat server will need to be restarted for this configuration to take effect.
        </p>

        <p>The backend database can be changed from Derby to another database provider. As of the current release, MySQL is the only other supported database provider. To modify the configuration, edit the <i>applicationContext.xml</i> file located in the <i>$TOMCAT_HOME/webapps/registry/WEB-INF/classes</i> directory. The following line:
        </p>

        <source>
&lt;context:property-placeholder location="classpath:derby.properties"/&gt;

  should be changed to:

&lt;context:property-placeholder location="classpath:mysql.properties"/&gt;
        </source>

        <p>The default configuration assumes that you have MySQL installed with a database named <i>registry</i> and will use a default user name and password as specified below. If you want to change the URL, database name, user name, and/or password you will need to edit the <i>mysql.properties</i> file located in the <i>$TOMCAT_HOME/webapps/registry/WEB-INF/classes</i> directory. The following lines pertain to the default configuration:
        </p>

        <source>
javax.persistence.jdbc.url=jdbc:mysql://localhost:3306/registry
javax.persistence.jdbc.user=registry
javax.persistence.jdbc.password=p@ssw0rd
        </source>

        <p>Additionally, if you are using a version of MySQL older than 5.x you will need to change the dialect. To do this simply add a "#" before the first hibernate.dialect entry and remove the "#" from the second entry.
        </p>

        <p>Before:</p>
        <source>
# For use with MySQL 5+
hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# For use with older versions of MySQL. See hibernate documentation.
#hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
        </source>
        <p>After:</p>
        <source>
# For use with MySQL 5+
#hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# For use with older versions of MySQL. See hibernate documentation.
hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
        </source>

        <p>No matter which database provider is configured as the backend database, the schema that supports the Registry Service is created by default when launching the service for the first time.
        </p>
      </subsection>

      <subsection name="Home Configuration">
        <p>By default, the registry home is configured as <i>http://localhost:8080/registry</i>. This should be modified to represent the end point of the target installation. To modify the configuration, edit the <i>applicationContext.xml</i> file located in the <i>$TOMCAT_HOME/webapps/registry/WEB-INF/classes</i> directory. Modify the following line with the new end point:
        </p>

        <source>
&lt;bean id="idGenerator" class="gov.nasa.pds.registry.model.naming.DefaultIdentifierGenerator"
p:home="http://localhost:8080/registry"/&gt;
        </source>

        <p>In a distributed environment with multiple Registry Service instances, the registry home value identifies the source of registered entries when replication is occurring among the instances.
        </p>
      </subsection>
    </section>

    <section name="Configuring the Application">
      <p>Once the Registry Service is installed and running, the list of supported object types must be registered with the service. The list of objects types corresponds with the types of products that a given instance of the Registry Service will support. Execute the <i>RegistryConfig</i> script from the <i>bin</i> directory in order to register the full set of object types:
      </p>

      <source>
% cd ${xdoc-artifactId}-${xdoc-version}/bin
% ./RegistryConfig
      </source>

      <p>The output from this command should show the registration of the Core object types and PDS object types. Since the configuration files referenced in the configuration script are slightly larger they are sent in chunks. Each configuration will get associated with a Registry Package and can be found by following the location link that comes in the header of the response. The output from the command should look something like the following:
      </p>

      <source>
* About to connect() to localhost port 8080 (#0)
*   Trying ::1... connected
* Connected to localhost (::1) port 8080 (#0)
&gt; POST /registry-service/configure?name=Core+Objects&amp;\
description=This+configures+the+core+set+of+registry+objects HTTP/1.1
&gt; User-Agent: curl/7.19.7 (universal-apple-darwin10.0) libcurl/7.19.7 OpenSSL/0.9.8l zlib/1.2.3
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; Content-type:application/xml
&gt; Content-Length: 5295
&gt; Expect: 100-continue
&gt; 
&lt; HTTP/1.1 100 Continue
&lt; HTTP/1.1 201 Created
&lt; Server: Apache-Coyote/1.1
&lt; Location: http://localhost:8080/registry/packages/\
urn:uuid:bd6e4f7b-dfb0-443c-b845-3378077b1016
&lt; Content-Type: text/plain
&lt; Transfer-Encoding: chunked
&lt; Date: Mon, 21 Mar 2011 19:55:52 GMT
&lt; 
* Connection #0 to host localhost left intact
* Closing connection #0
urn:uuid:bd6e4f7b-dfb0-443c-b845-3378077b1016

* About to connect() to localhost port 8080 (#0)
*   Trying ::1... connected
* Connected to localhost (::1) port 8080 (#0)
&gt; POST /registry-service/configure?name=PDS+Objects&amp;\
description=This+configures+PDS+object+types HTTP/1.1
&gt; User-Agent: curl/7.19.7 (universal-apple-darwin10.0) libcurl/7.19.7 OpenSSL/0.9.8l zlib/1.2.3
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; Content-type:application/xml
&gt; Content-Length: 18320
&gt; Expect: 100-continue
&gt; 
&lt; HTTP/1.1 100 Continue
&lt; HTTP/1.1 201 Created
&lt; Server: Apache-Coyote/1.1
&lt; Location: http://localhost:8080/registry/packages/\
urn:uuid:a07ad134-42ad-4781-9cbd-826bb9a8dfec
&lt; Content-Type: text/plain
&lt; Transfer-Encoding: chunked
&lt; Date: Mon, 21 Mar 2011 19:55:53 GMT
&lt; 
* Connection #0 to host localhost left intact
* Closing connection #0
urn:uuid:a07ad134-42ad-4781-9cbd-826bb9a8dfec
      </source>

      <p>The <i>RegistryConfig</i> script defaults to a Registry Service end point of <i>http://localhost:8080/registry</i>. If necessary, modify the script so that it corresponds with the end point of the target installation. In addition, this script should be executed prior to applying security to the service URLs since it does not account for a secured interface.
      </p>

      <p>Verify successful configuration by executing the command from the <a href="../operate/index.html#Report">Report</a> portion of the Operation section. The output from this command should look something like the following:
      </p>

      <source>
&lt;ns2:report xmlns:ns2='http://registry.pds.nasa.gov' registryVersion='0.7.0' packages='2' 
classificationNodes='67' classificationSchemes='1' services='0' extrinsics='0' associations='68' 
serverStarted='2011-08-28T12:45:43.514-07:00' status='OK'/&gt;
      </source>
    </section>
  </body>
</document>
