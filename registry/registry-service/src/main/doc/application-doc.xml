<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<applicationDocs targetNamespace="http://research.sun.com/wadl/2006/10">
    
    <doc xml:lang="en" title="PDS Registry Service API">
        <p>
        This is the proposed REST interface for a PDS Registry. To skip to an index of the endpoints click <a href="#endpoints">here</a>. 
        <a href="http://curl.haxx.se/">cURL</a> is a great way to test REST interfaces. If you have a Mac of Linux machine this utility 
        should already be installed. The following is a set of examples to run against the registry. You will have to change the registry 
        base URL to match the service you wish to talk to. For beta the base URL is ${registry.endpoint}.</p>
        
        <p>When running these examples please change the lid and version id to something other than those used in the examples. Implementation 
        is not yet completed and many error conditions have not yet been mapped to HTTP error codes.</p>
        
        <p><strong>Be sure to load the configuration data 
        before running these examples.</strong></p>
        <ol>
         <li>Publishing a new product<br/><br/>
             curl -X POST -H "Content-type:application/xml" -v -d @new_product.xml ${registry.endpoint}registry/products<br/><br/>
         Contents of new_product.xml are:
         <pre>
         <![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<product xmlns="http://registry.pds.nasa.gov" 
    lid="1234" 
    versionId="1.0" 
    name="Product 1234 v1" 
    objectType="Product" 
    description="This is a new version test product 1234 v1" >
    <slot name="first-name">
        <value>John</value>
    </slot>
    <slot name="last-name">
        <value>Doe</value>
    </slot>
    <slot name="phone">
        <value>(818)123-4567</value>
        <value>(818)765-4321</value>
    </slot>
</product>
]]>
         </pre>The output you would see from cURL:<pre>
<![CDATA[
* About to connect() to ${registry.host} port ${registry.port} (#0)
*   Trying ::1... Connection refused
*   Trying fe80::1... Connection refused
*   Trying 127.0.0.1... connected
* Connected to ${registry.host} (127.0.0.1) port ${registry.port} (#0)
> POST ${registry.context}/registry/products HTTP/1.1
> User-Agent: curl/7.16.3 (powerpc-apple-darwin9.0) libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
> Host: ${registry.host}:${registry.port}
> Accept: */*
> Content-type:application/xml
> Content-Length: 598
> 
< HTTP/1.1 201 Created
< Server: Apache-Coyote/1.1
< Location: ${registry.endpoint}registry/products/1234/1.0
< Content-Type: application/xml
< Content-Length: 0
< Date: Wed, 14 Apr 2010 20:33:32 GMT
< 
* Connection #0 to host ${registry.host} left intact
* Closing connection #0
]]>
         </pre>
         <p>Looking at the HTTP Response Location header you can see the URL to the registered product. This header is a standard way to exchange information about a newly created resource using HTTP.</p>
         </li>
         <li><p>Publishing a new version of the same product simple create a new file named "new_product_v2.xml" with the same contents as the original file making sure to change the version to something new (i.e "v2.0"). You can also change any of the other attributes you wish, adding new slots, or new links. Then simply run the following</p>
         <p>curl -X POST -H "Content-type:application/xml" -v -d @new_product_v2.xml ${registry.endpoint}registry/products/1234. 1234 is the logical id of the item you are trying to version. Currently there is no check being done to make sure that it is equal to the item being POSTed but it should be</p></li>
         <li><p>Publishing using JSON</p>
         <p>curl -X POST -H "Content-type:application/json" -v -d @json_product.txt ${registry.endpoint}registry/products</p>
         <p>Contents of json_product.txt are:</p>
         <pre>
         <![CDATA[
{"description":"This is a new version test product 5678 v1",
"name":"Product 5678 v1",
"objectType":"Product",
"versionId":"1.0",
"lid":"5678",
"slot":[{"name":"last-name","value":["Doe"]},
        {"name":"phone","value":["(818)123-4567","(818)765-4321"]},
        {"name":"first-name","value":["Jane"]}]}
         ]]>
         </pre>
         </li>
         <li><p>Getting a list of managed products. This will return the latest revisions of these products. URL will work in a browser.</p>
         <p>curl -X GET -H "Accept:application/xml" -v ${registry.endpoint}registry/products</p></li>
         <li><p>Retrieve the latest revision of the product with lid of 1234. URL will work in a browser.</p>
         <p>curl -X GET -H "Accept:application/xml" -v ${registry.endpoint}registry/products/1234</p></li>
         <li><p>Retrieve the earliest revision of the product with lid of 1234. URL will work in a browser.</p>
         <p>curl -X GET -H "Accept:application/xml" -v ${registry.endpoint}registry/products/1234/earliest</p></li>
         <li><p>Retrieve all revisions of the product with lid 1234. URL will work in a browser too.</p>
         <p>curl -X GET -H "Accept:application/xml" -v ${registry.endpoint}registry/products/1234/all</p></li>
         <li><p>Retrieve the registry entry for product 1234 with version id 2.0. URL will work in a browser.</p>
         <p>curl -X GET -H "Accept:application/xml" -v ${registry.endpoint}registry/products/1234/2.0</p></li>
         <li><p>Retrieve the JSON representation of the registry entry for product 1234 with version id 2.0. Can not be used in the browser as there is no way to set the HTTP Accept header directly. See next example for a URL to retrieve JSON via a browser.</p>
         <p>curl -X GET -H "Accept:application/json" -v ${registry.endpoint}registry/products/1234/2.0</p></li>
         <li><p>Retrieve the JSON representation of the registry entry for product 1234 with version id 3.0, encoding of the return type is done with a suffix in the URL. This will work in a browser.</p>
         <p>curl -X GET -v ${registry.endpoint}registry/products/1234/3.0.json</p></li>
         <li><p>Approve an product</p>
         <p>curl -X POST -H "Content-type:application/xml" -v ${registry.endpoint}registry/products/1234/1.0/approve</p></li>
         <li><p>Deprecate a product</p>
         <p>curl -X POST -H "Content-type:application/xml" -v ${registry.endpoint}registry/products/1234/1.0/deprecate</p></li>
         <li><p>Publish an association</p>
         <p>curl -X POST -H "Content-type:application/xml" -v -d @new_association.xml ${registry.endpoint}registry/associations</p></li>
         <li><p>Delete an association. Replace {guid} with the guid returned from the publish in the previous step.</p>
         <p>curl -X DELETE -v ${registry.endpoint}registry/associations/{guid}</p></li>
         <li><p>Publish a service</p>
         <p>curl -X POST -H "Content-type:application/xml" -v -d @new_service.xml ${registry.endpoint}registry/services</p></li>
         <li><p>Delete a service. Replace {guid} with the guid returned from the publish in the previous step.</p>
         <p>curl -X DELETE -v ${registry.endpoint}registry/services/{guid}</p></li>
         <li><p>Delete a product</p>
         <p>curl -X DELETE -v ${registry.endpoint}registry/products/1234/1.0</p></li>
         <li><p>List all Classification Nodes for the Canonical Object Type Scheme.</p>
         <p>curl -X GET -H "Accept:application/xml" -v ${registry.endpoint}registry/schemes/urn:registry:ObjectType/nodes</p></li>
         <li><p>Example of a ping to the server for some status information.</p>
         <p>curl -X GET -H "Accept:application/json" -v ${registry.endpoint}registry/status</p></li>
        </ol>
        <br/>
        <a name="endpoints">The following is a list of proposed endpoints for the REST API</a>
    </doc>
</applicationDocs>