# This login plug-in authenticates using LDAP
# 2010-12-30 - GMF - Customized for simple case (removed per-user filter)
#
# This is an advanced LDAP plug-in which supports LDAP groups.  In addition to authenticating by LDAP (like the standard ldap.cfg), this one also:
#
#   1. Puts the user in the Manager role, with access to all profiles, if they are in a group with sAMAccountName=Sawmill Administrators
#   2. Puts the user in the Manager role, with access to specific profiles, if they are not in group Sawmill Administrators, but are members
#      of one or more groups which have a "department" attribute, and where "department" is the internal name of a Sawmill profile.
#

ldap_with_groups = {

  expression = `
#echo("login plug-in ldap running");

# Hard-coded HDS preferences
string admin_dn = preferences.security.ldap_administrator_dn;
string admin_password = preferences.security.ldap_administrator_password;

# Build the LDAP connection URL
string url = if (preferences.security.use_ssl_for_ldap) then "ldaps" else "ldap";
url .= "://" . preferences.security.ldap_server_hostname . "/";
#echo("url: " . url);

# Initialize LDAP
string ld = ldap_initialize(url);
#echo("ld: " . ld);

# Bind to LDAP as administrator
node info = new_node();
@info{"dn"} = admin_dn;
@info{"password"} = admin_password;
#echo("binding with info: " . node_as_string(info));
bool success = ldap_bind(ld, info);
#echo("ADMIN BOUND: success=" . success);

if (success == false) then
  error("Admin login failed");

# Find the login user in the directory
node searchinfo = new_node();
@searchinfo{"base"} = preferences.security.ldap_base;
@searchinfo{"scope"} = "subtree";
@searchinfo{"filter"} = "(" . preferences.security.ldap_username_label . "=" . username . ")";
#echo("searchinfo: " . node_as_string(searchinfo));
node searchResult = ldap_search(ld, searchinfo);
#echo("searchResult: " . node_as_string(searchResult));

if (num_subnodes(searchResult) == 0) then
  error("Search results no results");

# Get the login user's DN
#echo("distinguishedName: ". distinguishedName);
#string login_user_dn = @searchResult{0}{'distinguishedName'};
#echo("login_user_dn: " . login_user_dn);
string uidstr = @searchResult{0}{'uid'};
echo("uid = " . uidstr);

string uiddn = "uid=";
uiddn .=  uidstr;
uiddn .=  ",ou=people,";
uiddn .=  preferences.security.ldap_base;
echo("uid dn = ".uiddn);
string login_user_dn = uiddn;

# Bind to them, to check their password
@info{"dn"} = login_user_dn;
#echo("binding to login user DN: " . @info{"dn"});
@info{"password"} = password;
#echo("Calling ldap_bind with info: " . node_as_string(info));
bool success = ldap_bind(ld, info);
#echo("USER BIND: success=" . success);

# If binding failed, login succeeded; make sure a user record exists
if (success) then (

  string converted_username = lowercase(username);
  converted_username = replace_all(converted_username, ' ', '_');
  
  # Create the user node if it doesn't exist
  if (!('users'?{converted_username})) then
    @'users'{converted_username} = '';

  # Get a handle to the user node
  node user = 'users'{converted_username};

#  echo("user: " . node_as_string(user));

  # Set the username and password checksum
  @user{"username"} = username;
  @user{"password_checksum"} = md5_digest(password);

  # Query for members of group Sawmill Administrators
  node gsearchinfo = new_node();
#  @gsearchinfo{"base"} = preferences.security.ldap_base;
  @gsearchinfo{"base"} = "ou=groups," . preferences.security.ldap_base;
#  @gsearchinfo{"base"} = login_user_dn ;
  @gsearchinfo{"scope"} = "subtree";

  ## If the DN contains a backslash, it must be escaped to backslash-5c, in LDAP search
  string login_user_dn_for_search = replace_all(login_user_dn, "\\\\", "\\\\5c");
  @gsearchinfo{"filter"} = "(uniqueMember=" . login_user_dn_for_search .")";
#  echo("gsearchinfo: " . node_as_string(gsearchinfo));
#  echo("ld: " . ld);
  node searchResult = ldap_search(ld, gsearchinfo);
#  echo("searchResult: " . node_as_string(searchResult));

  node resultNode;
  bool inSawmillAdministratorsGroup = false;
  bool foundSawmillAccess = false;
  int profilenum = 0;
  foreach resultNode searchResult (
    if (@resultNode{"cn"} eq "PDS_Affiliate") then (
	  inSawmillAdministratorsGroup = true;
	  echo("Found " . username . " in Sawmill Administrators group");
	  foundSawmillAccess = true;
	);
	else if (contains(@resultNode{"sAMAccountName"}, "Sawmill")) then (
      echo("sawmill profile: " . @resultNode{"department"});
	  if (@resultNode{"objectClass"} ne "") then (
	    @user{"access"}{0}{"profiles"}{profilenum} = @resultNode{"department"};
		profilenum++;
		echo("Added access for Sawmill profile " . @resultNode{"department"});
		foundSawmillAccess = true;
      ); # if department
	); # if Sawmill group
  ); # foreach resultNode
 
### Allow guest access to all users ### 
#  if (!foundSawmillAccess) then
#     error("User " . username . " has no access to Sawmill");
###

	   # Administrators are in Manager role, and can access all profiles
  if (inSawmillAdministratorsGroup) then (
  
     # Put them in role_1 (Manager)
     (user . '.access.0.roles.role_1') = 'role_1';
  
     # Access to all profile
    (user . '.access.0.all_profiles') = true;
#	echo("Granting access to all profiles");
  );
  
  # Non-administrators are in role Manager, and can only view profiles as their group membership allows
  else (
#    (user . '.access.0.roles.role_1') = 'role_1';
#    (user . '.access.0.all_profiles') = false;
#	echo("Granting only view access");

  # Make them a view-only user.  To apply other roles for some users, modify this code.
  (user . '.access.0.roles.role_2') = 'role_2';
  (user . '.access.0.all_profiles') = true;
	);
	 
#echo("user: " . node_as_string(user));
  
  # Make them a view-only user.  To apply other roles for some users, modify this code.
#  (user . '.access.0.roles.role_2') = 'role_2';

  # Give use access to all profiles (if selective profile access is desired, edit this code to set access.profiles to a list, e.g.:
  #
  #      profiles = {
  #        0 = "profile1"
  #        1 = "profile2"
  #      } # profiles
  # ).
 # (user . '.access.0.all_profiles') = true;

# An example of an LDAP search is shown below.  Such a search might be used to determine membership in an "admin" group, for instance,
# or to decide which profiles they can access.  But the default behavior of this plug-in is to make everyone a view-only user of all profile.
#  node searchinfo = new_node();
#  @searchinfo{"base"} = base;
#  @searchinfo{"scope"} = "subtree";
#  @searchinfo{"filter"} = "(CN=David Gilmore)";
#  node searchResult = ldap_search(ld, searchinfo);
#  echo("searchResult: " . node_as_string(searchResult));


#  An example of searching a LDAP group for members
#  string AdGroup = "CN=Sawmill Administrators,OU=Groups,DC=domain,DC=company,DC=com"
#  Query for members of group Sawmill Administrators
#  node CheckAdminMembership = new_node();
#  @searchinfo{"base"} = preferences.security.ldap_base;
#  @searchinfo{"scope"} = "subtree";
#  @searchinfo{"filter"} = "(memberOf=" . AdGroup . ")";
#  echo("searchinfo: " . node_as_string(searchinfo));
#  node searchResult = ldap_search(ld, searchinfo);
#  echo("searchResult: " . node_as_string(searchResult));
  
#  Searches result of LDAP group membership query (154-163)
#  node resultNode;
#  bool inSawmillAdministratorsGroup = false;
#  foreach resultNode searchResult (
#    if (@resultNode{"sAMAccountName"} eq username) then (
#	  inSawmillAdministratorsGroup = true;
#	);
#  );
#	if (!foundSawmillAccess) then
#     error("User " . username . " has no access to Sawmill");
### Administrators are in Manager role, and can access all profiles
#  if (inSawmillAdministratorsGroup) then (
     # Put them in role_1 (Manager)
#     (user . '.access.0.roles.role_1') = 'role_1';
 
     # Access to all profile
#    (user . '.access.0.all_profiles') = true;
#	echo("Granting access to all profiles");


#  # Run a search to find who reports to this user [FAKING IT RIGHT NOW WITH displayName]
#  node searchinfo = new_node();
#  @searchinfo{"base"} = base;
#  @searchinfo{"scope"} = "subtree";
#  @searchinfo{"filter"} = "(displayName=" . username . ")";
#  echo("searchinfo: " . node_as_string(searchinfo));
#  node searchResult = ldap_search(ld, searchinfo);
#  echo("reportsTo search result: " . node_as_string(searchResult));
#
#  # Build a filter for this user, which selects all the people reporting to them (as determined by the LDAP search above)
#  string report_filter = "";
#  node result;
#  foreach result searchResult (
#    if (report_filter ne "") then
#      report_filter .= " or ";
#    report_filter .= "(user within '" . @result{"name"} . "')";
#  );
#  echo("report_filter: " . report_filter);
#
#  (user . '.report_filters.all_profiles.filter_expression') = report_filter;
#
#  echo("modified user: " . node_as_string(user));
  
  save_node('users');


  # Authentication succeeded, so save true
  true;
);

# If binding failed, login failed
else (
  false;
);

`

} # ldap_with_groups
